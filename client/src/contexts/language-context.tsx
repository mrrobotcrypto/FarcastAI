import { createContext, useContext, useState, useEffect, ReactNode } from 'react';

type Language = 'en' | 'tr';

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};

// Translation dictionary
const translations = {
  en: {
    // Header
    'app.title': 'FarcastAI',
    'app.subtitle': 'AI Content Creator',
    
    // Content Generator
    'content.creator': 'Content Creator',
    'content.aiGeneration': 'AI Generation',
    'content.manualInput': 'Manual Input',
    'content.topic': 'Content Topic',
    'content.topic.placeholder': 'What would you like to create content about?',
    'content.type': 'Content Type',
    'content.type.educational': 'Educational Thread',
    'content.type.news': 'News Update',
    'content.type.personal': 'Personal Story',
    'content.type.analysis': 'Industry Analysis',
    'content.type.creative': 'Creative Story',
    'content.tone': 'Tone',
    'content.tone.professional': 'Professional',
    'content.tone.casual': 'Casual',
    'content.tone.humorous': 'Humorous',
    'content.generate': 'Generate Content',
    'content.generating': 'Generating...',
    
    // Image Selector
    'images.title': 'Image Selection',
    'images.featured': 'Featured Images',
    'images.search': 'Search Images',
    'images.search.placeholder': 'Search for images...',
    'images.uploading': 'Uploading...',
    'images.upload': 'Upload Image',
    'images.select': 'Select Image',
    'images.selected': 'Selected',
    'images.photographer': 'Photo by',
    
    // Content Preview
    'preview.title': 'Content Preview',
    'preview.edit': 'Edit',
    'preview.cancel': 'Cancel',
    'preview.saveChanges': 'Save Changes',
    'preview.yourUsername': 'Your Username',
    'preview.generatedBy': 'Generated by FarcastAI',
    'preview.reply': 'Reply',
    'preview.recast': 'Recast',
    'preview.like': 'Like',
    'preview.castToFarcaster': 'Cast to Farcaster',
    'preview.publishing': 'Publishing...',
    'preview.connectWallet': 'Connect your wallet to publish content',
    
    // Cast Preparation
    'cast.prepared': 'Cast prepared! Share manually on Farcaster',
    'cast.content': 'Prepared content:',
    'cast.openFarcaster': 'Open in Farcaster and Share',
    'cast.close': 'Close',
    
    // Wallet
    'wallet.connect': 'Connect Wallet',
    'wallet.connecting': 'Connecting...',
    'wallet.connected': 'Wallet Connected',
    'wallet.farcaster': 'Connect with Farcaster Wallet',
    'wallet.coinbase': 'Connect with Coinbase Wallet',
    'wallet.disconnect': 'Disconnect',
    'wallet.fid': 'FID:',
    'wallet.notConnected': 'Not connected',
    'wallet.address': 'Address:',
    'wallet.ensName': 'ENS Name:',
    
    // Recent Activity
    'activity.title': 'Recent Activity',
    'activity.published': 'Published',
    'activity.draftSaved': 'Draft saved',
    'activity.view': 'View →',
    
    // Footer
    'footer.privacy': 'Privacy',
    'footer.terms': 'Terms',
    'footer.support': 'Support',
    
    // Toasts & Messages
    'toast.contentGenerated': 'Content generated successfully!',
    'toast.castPrepared': 'Cast prepared!',
    'toast.castPreparedDesc': 'You can share manually on Farcaster',
    'toast.walletConnected': 'Wallet Connected',
    'toast.walletDisconnected': 'Wallet Disconnected',
    'toast.connectionFailed': 'Connection Failed',
    'toast.farcasterLinked': 'Farcaster account linked!',
    'toast.farcasterLinkedDesc': 'account automatically linked',
    
    // Demo Mode
    'demo.indicator': 'Demo Mode: Casts are simulated - Not sent to real Farcaster',
    
    // Language
    'language.switch': 'Switch Language',
    'language.turkish': 'Türkçe',
    'language.english': 'English'
  },
  tr: {
    // Header
    'app.title': 'FarcastAI',
    'app.subtitle': 'AI İçerik Üretici',
    
    // Content Generator
    'content.creator': 'İçerik Üretici',
    'content.aiGeneration': 'AI Üretimi',
    'content.manualInput': 'Manuel Giriş',
    'content.topic': 'İçerik Konusu',
    'content.topic.placeholder': 'Hangi konu hakkında içerik oluşturmak istiyorsunuz?',
    'content.type': 'İçerik Türü',
    'content.type.educational': 'Eğitici Thread',
    'content.type.news': 'Haber Güncellemesi',
    'content.type.personal': 'Kişisel Hikaye',
    'content.type.analysis': 'Sektör Analizi',
    'content.type.creative': 'Yaratıcı Hikaye',
    'content.tone': 'Ton',
    'content.tone.professional': 'Profesyonel',
    'content.tone.casual': 'Samimi',
    'content.tone.humorous': 'Esprili',
    'content.generate': 'İçerik Üret',
    'content.generating': 'Üretiliyor...',
    
    // Image Selector
    'images.title': 'Görsel Seçimi',
    'images.featured': 'Öne Çıkan Görseller',
    'images.search': 'Görsel Ara',
    'images.search.placeholder': 'Görsel arayın...',
    'images.uploading': 'Yükleniyor...',
    'images.upload': 'Görsel Yükle',
    'images.select': 'Görseli Seç',
    'images.selected': 'Seçildi',
    'images.photographer': 'Fotoğrafçı:',
    
    // Content Preview
    'preview.title': 'İçerik Önizleme',
    'preview.edit': 'Düzenle',
    'preview.cancel': 'İptal',
    'preview.saveChanges': 'Değişiklikleri Kaydet',
    'preview.yourUsername': 'Kullanıcı Adınız',
    'preview.generatedBy': 'FarcastAI tarafından üretildi',
    'preview.reply': 'Yanıtla',
    'preview.recast': 'Recast',
    'preview.like': 'Beğen',
    'preview.castToFarcaster': 'Farcaster\'a Gönder',
    'preview.publishing': 'Gönderiliyor...',
    'preview.connectWallet': 'İçerik yayınlamak için cüzdanınızı bağlayın',
    
    // Cast Preparation
    'cast.prepared': 'Cast hazırlandı! Manuel olarak Farcaster\'da paylaşın',
    'cast.content': 'Hazırlanan içerik:',
    'cast.openFarcaster': 'Farcaster\'da Aç ve Paylaş',
    'cast.close': 'Kapat',
    
    // Wallet
    'wallet.connect': 'Cüzdan Bağla',
    'wallet.connecting': 'Bağlanıyor...',
    'wallet.connected': 'Cüzdan Bağlandı',
    'wallet.farcaster': 'Farcaster Cüzdanı ile Bağlan',
    'wallet.coinbase': 'Coinbase Cüzdanı ile Bağlan',
    'wallet.disconnect': 'Bağlantıyı Kes',
    'wallet.fid': 'FID:',
    'wallet.notConnected': 'Bağlı değil',
    'wallet.address': 'Adres:',
    'wallet.ensName': 'ENS Adı:',
    
    // Recent Activity
    'activity.title': 'Son Aktiviteler',
    'activity.published': 'Yayınlandı',
    'activity.draftSaved': 'Taslak kaydedildi',
    'activity.view': 'Görüntüle →',
    
    // Footer
    'footer.privacy': 'Gizlilik',
    'footer.terms': 'Şartlar',
    'footer.support': 'Destek',
    
    // Toasts & Messages
    'toast.contentGenerated': 'İçerik başarıyla üretildi!',
    'toast.castPrepared': 'Cast hazırlandı!',
    'toast.castPreparedDesc': 'Farcaster\'da manuel olarak paylaşabilirsiniz',
    'toast.walletConnected': 'Cüzdan Bağlandı',
    'toast.walletDisconnected': 'Cüzdan Bağlantısı Kesildi',
    'toast.connectionFailed': 'Bağlantı Başarısız',
    'toast.farcasterLinked': 'Farcaster hesabı bağlandı!',
    'toast.farcasterLinkedDesc': 'hesabınız otomatik olarak bağlandı',
    
    // Demo Mode
    'demo.indicator': 'Demo Modu: Cast\'ler simüle ediliyor - Gerçek Farcaster\'a gönderilmiyor',
    
    // Language
    'language.switch': 'Dil Değiştir',
    'language.turkish': 'Türkçe',
    'language.english': 'English'
  }
};

interface LanguageProviderProps {
  children: ReactNode;
}

export const LanguageProvider = ({ children }: LanguageProviderProps) => {
  const [language, setLanguage] = useState<Language>(() => {
    const stored = localStorage.getItem('farcastai-language');
    return (stored as Language) || 'en';
  });

  useEffect(() => {
    localStorage.setItem('farcastai-language', language);
  }, [language]);

  const t = (key: string): string => {
    return translations[language][key as keyof typeof translations[typeof language]] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};