{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a Farcaster content creation application that uses AI to generate social media content for the decentralized social network Farcaster. The application allows users to connect their wallets, generate AI-powered content using OpenAI's GPT models, select accompanying images from Pexels, and publish directly to Farcaster. It features a modern React frontend with TypeScript, a Node.js Express backend, and uses Drizzle ORM for database operations with PostgreSQL.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and building\n- **UI Library**: Shadcn/ui components built on Radix UI primitives for accessible, customizable components\n- **Styling**: Tailwind CSS with custom CSS variables for theming (dark/light mode support)\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Wallet Integration**: Custom wallet provider supporting Web3 wallet connections (MetaMask, etc.)\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with structured error handling and logging middleware\n- **Development**: TSX for TypeScript execution in development, ESBuild for production builds\n\n## Data Storage\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema**: Two main entities - Users (wallet addresses, Farcaster profiles) and ContentDrafts (generated content, images, publishing status)\n- **Storage Strategy**: In-memory storage fallback for development, designed for PostgreSQL in production\n- **Migrations**: Drizzle Kit for database schema management\n\n## Authentication & Authorization\n- **Wallet-based Authentication**: Users authenticate via Web3 wallet signatures\n- **Session Management**: No traditional sessions - wallet address serves as user identifier\n- **User Profiles**: Integration with Farcaster profiles (FID, username, display name, avatar)\n\n## External Dependencies\n\n### Third-party APIs\n- **OpenAI API**: GPT-5 model for AI content generation with customizable prompts based on topic, content type, and tone\n- **Pexels API**: Stock photography search and retrieval for content images\n- **Farcaster Hub API**: Direct integration for publishing casts to the Farcaster network\n- **Neon Database**: Serverless PostgreSQL hosting for production database\n\n### Key Libraries\n- **UI Components**: Complete Radix UI ecosystem (dialogs, dropdowns, forms, etc.) wrapped in Shadcn/ui\n- **Form Handling**: React Hook Form with Zod schema validation\n- **Date Utilities**: date-fns for date manipulation and formatting\n- **Styling Utilities**: class-variance-authority and clsx for conditional CSS classes\n- **Image Handling**: Embla Carousel for image galleries and selection interfaces\n\n### Development Tools\n- **Replit Integration**: Custom Vite plugins for Replit development environment\n- **Error Handling**: Runtime error overlay for development debugging\n- **Code Quality**: TypeScript strict mode with comprehensive type checking\n- **Build Process**: Vite for frontend bundling, ESBuild for backend compilation","size_bytes":3316},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":1795},"test-results.md":{"content":"# OpenAI Content Generation Testing Results\n\n## Test Environment\n- Application running on port 5000\n- OpenAI API Key: Present (but quota exceeded)\n- Current Status: Testing comprehensive functionality\n\n## Testing Checklist\n\n### âœ… 1. Data-testid Attributes Verification\n- `input-topic` - Topic input field\n- `select-content-type` - Content type dropdown\n- `button-tone-professional` - Professional tone button\n- `button-tone-casual` - Casual tone button  \n- `button-tone-humorous` - Humorous tone button\n- `button-generate-content` - Generate content button\n- `button-save-draft` - Save draft button\n- `button-edit-content` - Edit content button\n- `textarea-edit-content` - Edit content textarea\n- `button-save-edit` - Save edit button\n- `button-cancel-edit` - Cancel edit button\n- `preview-content` - Content preview area\n- `preview-image` - Selected image preview\n- `button-publish-to-farcaster` - Publish button\n\n### 2. Form Interface Testing\n- [ ] Topic input field functionality\n- [ ] Content type dropdown options\n- [ ] Tone button selection\n- [ ] Form state management\n- [ ] Button states during interaction\n\n### 3. Input Validation Testing\n- [ ] Empty topic validation\n- [ ] Missing content type validation\n- [ ] Form submission with invalid data\n- [ ] Required field indicators\n\n### 4. Content Generation Testing\n- [ ] Test with \"blockchain technology\" topic\n- [ ] Test with \"artificial intelligence\" topic  \n- [ ] Test with \"web3 development\" topic\n- [ ] Educational content type\n- [ ] News content type\n- [ ] Personal content type\n- [ ] Analysis content type\n- [ ] Creative content type\n- [ ] Professional tone\n- [ ] Casual tone\n- [ ] Humorous tone\n\n### 5. Error Handling Testing\n- [ ] OpenAI quota exceeded error\n- [ ] Network error handling\n- [ ] Invalid API response handling\n- [ ] User-friendly error messages\n\n### 6. Save Draft Testing\n- [ ] Save draft without wallet connection\n- [ ] Save draft with wallet connection\n- [ ] Draft persistence verification\n- [ ] Draft data integrity\n\n### 7. Content Preview Testing\n- [ ] Content display in preview\n- [ ] Edit functionality\n- [ ] Save changes functionality\n- [ ] Cancel edit functionality\n\n### 8. Console Error Monitoring\n- [ ] JavaScript errors\n- [ ] Network errors\n- [ ] API errors\n- [ ] Unhandled promise rejections\n\n## Test Execution Log","size_bytes":2307},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\n// CORS configuration for split deployment\napp.use((req, res, next) => {\n  const origin = req.headers.origin;\n  const allowedOrigins = [\n    'http://localhost:5173',\n    'http://localhost:3000', \n    'https://farcastai.vercel.app', // Update with your Vercel URL\n    ...(process.env.FRONTEND_URL ? [process.env.FRONTEND_URL] : [])\n  ];\n\n  if (origin && allowedOrigins.includes(origin)) {\n    res.setHeader('Access-Control-Allow-Origin', origin);\n    res.setHeader('Vary', 'Origin');\n  }\n  \n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n  res.setHeader('Access-Control-Allow-Credentials', 'true');\n  \n  if (req.method === 'OPTIONS') {\n    res.sendStatus(200);\n    return;\n  }\n  \n  next();\n});\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Serve static files FIRST - before any other routes or middleware\n  app.get('/icon.png', (req, res) => {\n    res.sendFile('icon.png', { root: './client/public' });\n  });\n  \n  app.get('/logo.png', (req, res) => {\n    res.sendFile('logo.png', { root: './client/public' });\n  });\n  \n  app.get('/splash.png', (req, res) => {\n    res.sendFile('splash.png', { root: './client/public' });\n  });\n  \n  app.get('/og.png', (req, res) => {\n    res.sendFile('og.png', { root: './client/public' });\n  });\n  \n  app.get('/image.png', (req, res) => {\n    res.sendFile('image.png', { root: './client/public' });\n  });\n  \n  // Redirect to Farcaster hosted manifest\n  app.get('/.well-known/farcaster.json', (req, res) => {\n    res.redirect(307, 'https://api.farcaster.xyz/miniapps/hosted-manifest/019965e1-c784-0cb0-1fb2-104aae4c9b2d');\n  });\n\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":3706},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { aiService } from \"./services/openai\";\nimport { pexelsService } from \"./services/pexels\";\nimport { farcasterService } from \"./services/farcaster\";\nimport { insertUserSchema, insertContentDraftSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst generateContentSchema = z.object({\n  topic: z.string().min(1, \"Topic is required\"),\n  contentType: z.string().min(1, \"Content type is required\"),\n  tone: z.string().min(1, \"Tone is required\"),\n});\n\nconst publishCastSchema = z.object({\n  draftId: z.string().min(1, \"Draft ID is required\"),\n  imageUrl: z.string().optional(),\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // User routes\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByWalletAddress(userData.walletAddress);\n      if (existingUser) {\n        return res.json(existingUser);\n      }\n\n      const user = await storage.createUser(userData);\n      res.json(user);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/users/:walletAddress\", async (req, res) => {\n    try {\n      const user = await storage.getUserByWalletAddress(req.params.walletAddress);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/users/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const user = await storage.updateUser(req.params.id, updates);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Content generation routes\n  app.post(\"/api/content/generate\", async (req, res) => {\n    try {\n      const { topic, contentType, tone } = generateContentSchema.parse(req.body);\n      \n      const generatedContent = await aiService.generateContent(topic, contentType, tone);\n      res.json({ content: generatedContent });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Content draft routes\n  app.post(\"/api/drafts\", async (req, res) => {\n    try {\n      const draftData = insertContentDraftSchema.parse(req.body);\n      const draft = await storage.createContentDraft(draftData);\n      res.json(draft);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/drafts/user/:userId\", async (req, res) => {\n    try {\n      const drafts = await storage.getContentDraftsByUserId(req.params.userId);\n      res.json(drafts);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/drafts/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const draft = await storage.updateContentDraft(req.params.id, updates);\n      if (!draft) {\n        return res.status(404).json({ message: \"Draft not found\" });\n      }\n      res.json(draft);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/drafts/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteContentDraft(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Draft not found\" });\n      }\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Image search routes\n  app.get(\"/api/images/search\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      const perPage = parseInt(req.query.per_page as string) || 12;\n      \n      if (!query) {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n\n      const photos = await pexelsService.searchPhotos(query, perPage);\n      res.json(photos);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/images/featured\", async (req, res) => {\n    try {\n      const perPage = parseInt(req.query.per_page as string) || 12;\n      const photos = await pexelsService.getFeaturedPhotos(perPage);\n      res.json(photos);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Farcaster casting routes\n  app.post(\"/api/farcaster/cast\", async (req, res) => {\n    try {\n      const { draftId, imageUrl } = publishCastSchema.parse(req.body);\n      \n      const draft = await storage.getContentDraft(draftId);\n      if (!draft) {\n        return res.status(404).json({ message: \"Draft not found\" });\n      }\n\n      const user = await storage.getUser(draft.userId);\n      if (!user) {\n        return res.status(400).json({ message: \"User not found\" });\n      }\n      \n      // If user doesn't have Farcaster FID, use demo mode\n      let farcasterFid = user.farcasterFid;\n      if (!farcasterFid) {\n        // Demo mode: Use a placeholder FID for testing\n        farcasterFid = \"123456\";\n        console.log(\"Demo mode: Using placeholder FID for casting\");\n      }\n\n      // Prepare cast for manual submission instead of auto-posting\n      const castPreparation = await farcasterService.prepareCast(\n        farcasterFid,\n        draft.generatedContent || \"\",\n        imageUrl\n      );\n\n      // Mark as prepared but not yet published\n      await storage.updateContentDraft(draftId, {\n        isPublished: false, // Will be true when user manually posts\n        farcasterCastHash: null, // Will be set when user provides it\n      });\n\n      res.json({\n        ...castPreparation,\n        message: \"Cast prepared for manual posting to Farcaster\"\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/farcaster/profile/:fid\", async (req, res) => {\n    try {\n      const profile = await farcasterService.getUserProfile(req.params.fid);\n      res.json(profile);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/farcaster/user-by-wallet/:walletAddress\", async (req, res) => {\n    try {\n      const farcasterUser = await farcasterService.getUserByWalletAddress(req.params.walletAddress);\n      if (!farcasterUser) {\n        return res.status(404).json({ message: \"User not found on Farcaster\" });\n      }\n      res.json(farcasterUser);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Webhook for Farcaster events\n  app.post(\"/api/webhook\", async (req, res) => {\n    try {\n      // Handle Farcaster server events (notifications, etc.)\n      console.log(\"Farcaster webhook received:\", req.body);\n      res.status(200).json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":7251},"server/storage.ts":{"content":"import { type User, type InsertUser, type ContentDraft, type InsertContentDraft } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByWalletAddress(walletAddress: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n\n  // Content draft methods\n  getContentDraft(id: string): Promise<ContentDraft | undefined>;\n  getContentDraftsByUserId(userId: string): Promise<ContentDraft[]>;\n  createContentDraft(draft: InsertContentDraft): Promise<ContentDraft>;\n  updateContentDraft(id: string, updates: Partial<ContentDraft>): Promise<ContentDraft | undefined>;\n  deleteContentDraft(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private contentDrafts: Map<string, ContentDraft>;\n\n  constructor() {\n    this.users = new Map();\n    this.contentDrafts = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByWalletAddress(walletAddress: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.walletAddress === walletAddress,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser,\n      id,\n      farcasterFid: insertUser.farcasterFid || null,\n      farcasterUsername: insertUser.farcasterUsername || null,\n      farcasterDisplayName: insertUser.farcasterDisplayName || null,\n      farcasterAvatar: insertUser.farcasterAvatar || null,\n      createdAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async getContentDraft(id: string): Promise<ContentDraft | undefined> {\n    return this.contentDrafts.get(id);\n  }\n\n  async getContentDraftsByUserId(userId: string): Promise<ContentDraft[]> {\n    return Array.from(this.contentDrafts.values()).filter(\n      (draft) => draft.userId === userId,\n    );\n  }\n\n  async createContentDraft(insertDraft: InsertContentDraft): Promise<ContentDraft> {\n    const id = randomUUID();\n    const draft: ContentDraft = {\n      id,\n      userId: insertDraft.userId,\n      topic: insertDraft.topic,\n      contentType: insertDraft.contentType,\n      tone: insertDraft.tone,\n      generatedContent: insertDraft.generatedContent || null,\n      selectedImage: insertDraft.selectedImage || null,\n      isPublished: insertDraft.isPublished || false,\n      farcasterCastHash: insertDraft.farcasterCastHash || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.contentDrafts.set(id, draft);\n    return draft;\n  }\n\n  async updateContentDraft(id: string, updates: Partial<ContentDraft>): Promise<ContentDraft | undefined> {\n    const draft = this.contentDrafts.get(id);\n    if (!draft) return undefined;\n    \n    const updatedDraft = { \n      ...draft, \n      ...updates, \n      updatedAt: new Date() \n    };\n    this.contentDrafts.set(id, updatedDraft);\n    return updatedDraft;\n  }\n\n  async deleteContentDraft(id: string): Promise<boolean> {\n    return this.contentDrafts.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":3578},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, json, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  walletAddress: text(\"wallet_address\").notNull().unique(),\n  farcasterFid: text(\"farcaster_fid\"),\n  farcasterUsername: text(\"farcaster_username\"),\n  farcasterDisplayName: text(\"farcaster_display_name\"),\n  farcasterAvatar: text(\"farcaster_avatar\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const contentDrafts = pgTable(\"content_drafts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  topic: text(\"topic\").notNull(),\n  contentType: text(\"content_type\").notNull(),\n  tone: text(\"tone\").notNull(),\n  generatedContent: text(\"generated_content\"),\n  selectedImage: json(\"selected_image\").$type<{\n    url: string;\n    alt: string;\n    photographer: string;\n    source: string;\n  }>(),\n  isPublished: boolean(\"is_published\").default(false).notNull(),\n  farcasterCastHash: text(\"farcaster_cast_hash\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContentDraftSchema = createInsertSchema(contentDrafts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertContentDraft = z.infer<typeof insertContentDraftSchema>;\nexport type ContentDraft = typeof contentDrafts.$inferSelect;\n","size_bytes":1797},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { WalletProvider } from \"@/hooks/use-wallet\";\nimport { LanguageProvider } from \"@/components/language-provider\";\nimport Home from \"@/pages/home\";\nimport NotFound from \"@/pages/not-found\";\nimport { useEffect } from \"react\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  // Initialize Farcaster SDK\n  useEffect(() => {\n    const initializeFarcasterSDK = async () => {\n      try {\n        if (typeof window !== 'undefined') {\n          const { sdk } = await import('@farcaster/miniapp-sdk');\n          // Signal that the app is ready - this will hide the splash screen\n          await sdk.actions.ready();\n          console.log('Farcaster SDK initialized successfully');\n        }\n      } catch (error) {\n        console.warn('Failed to initialize Farcaster SDK:', error);\n      }\n    };\n    \n    initializeFarcasterSDK();\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <LanguageProvider>\n        <ThemeProvider defaultTheme=\"dark\" storageKey=\"farcastai-theme\">\n          <WalletProvider>\n            <TooltipProvider>\n              <Toaster />\n              <Router />\n            </TooltipProvider>\n          </WalletProvider>\n        </ThemeProvider>\n      </LanguageProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1707},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(222, 84%, 4%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 4%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(243, 75%, 59%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(215, 27%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(215, 27%, 17%);\n  --muted-foreground: hsl(217, 10%, 64%);\n  --accent: hsl(38, 92%, 50%);\n  --accent-foreground: hsl(222, 84%, 4%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(215, 27%, 17%);\n  --input: hsl(215, 27%, 17%);\n  --ring: hsl(243, 75%, 59%);\n  --radius: 0.5rem;\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --shadow-2xs: 0px 2px 0px 0px hsl(243, 75%, 59%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(243, 75%, 59%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(243, 75%, 59%, 0.00), 0px 1px 2px -1px hsl(243, 75%, 59%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(243, 75%, 59%, 0.00), 0px 1px 2px -1px hsl(243, 75%, 59%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(243, 75%, 59%, 0.00), 0px 2px 4px -1px hsl(243, 75%, 59%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(243, 75%, 59%, 0.00), 0px 4px 6px -1px hsl(243, 75%, 59%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(243, 75%, 59%, 0.00), 0px 8px 10px -1px hsl(243, 75%, 59%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(243, 75%, 59%, 0.00);\n  --spacing: 0.25rem;\n}\n\n.light {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222, 84%, 4%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 4%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 4%);\n  --primary: hsl(243, 75%, 59%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222, 84%, 4%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(38, 92%, 50%);\n  --accent-foreground: hsl(222, 84%, 4%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(243, 75%, 59%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.wallet-gradient {\n  background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--accent)));\n}\n\n.content-card {\n  backdrop-filter: blur(10px);\n  background: hsl(var(--card) / 0.8);\n}\n\n.generate-button {\n  background: linear-gradient(135deg, hsl(var(--primary)), hsl(243, 75%, 49%));\n  box-shadow: 0 4px 14px 0 hsl(var(--primary) / 0.35);\n  border: 1px solid hsl(var(--primary) / 0.5);\n}\n\n.generate-button:hover {\n  background: linear-gradient(135deg, hsl(243, 75%, 49%), hsl(243, 75%, 39%));\n  box-shadow: 0 6px 20px 0 hsl(var(--primary) / 0.5);\n  transform: translateY(-1px);\n}\n\n.generate-button:disabled {\n  background: linear-gradient(135deg, hsl(var(--muted)), hsl(var(--muted-foreground) / 0.5));\n  box-shadow: none;\n  border: 1px solid hsl(var(--border));\n  transform: none;\n  cursor: not-allowed;\n  opacity: 0.6;\n}\n\n/* Tab styling improvements */\n.tabs-list-improved {\n  background: hsl(var(--muted) / 0.5);\n  border: 1px solid hsl(var(--border));\n}\n\n/* Upload drop zone styling */\n.upload-drop-zone {\n  background: linear-gradient(135deg, hsl(var(--card)) 0%, hsl(var(--muted) / 0.3) 100%);\n  border: 2px dashed hsl(var(--border));\n  transition: all 0.3s ease;\n}\n\n.upload-drop-zone:hover {\n  border-color: hsl(var(--primary) / 0.5);\n  background: linear-gradient(135deg, hsl(var(--card)) 0%, hsl(var(--primary) / 0.05) 100%);\n}\n\n.farcaster-purple {\n  background: linear-gradient(135deg, #8B5CF6, #A855F7);\n}\n","size_bytes":4173},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/farcaster.ts":{"content":"interface FarcasterCastRequest {\n  text: string;\n  embeds?: Array<{\n    url?: string;\n    castId?: {\n      fid: number;\n      hash: string;\n    };\n  }>;\n  embedsDeprecated?: string[];\n  mentions?: number[];\n  mentionsPositions?: number[];\n}\n\ninterface FarcasterCastResponse {\n  hash: string;\n  success: boolean;\n}\n\nexport class FarcasterService {\n  private hubUrl: string;\n  private warpcastApiUrl: string;\n\n  constructor() {\n    // Using Farcaster Hub API for direct casting\n    this.hubUrl = process.env.FARCASTER_HUB_URL || 'https://hub.farcaster.xyz';\n    this.warpcastApiUrl = 'https://api.warpcast.com';\n  }\n\n  async prepareCast(\n    fid: string, \n    text: string, \n    imageUrl?: string\n  ): Promise<{ castContent: string; farcasterUrl: string; ready: boolean }> {\n    try {\n      // Prepare cast for manual submission\n      console.log('Preparing Farcaster cast for FID:', fid);\n      console.log('Cast content:', text);\n      if (imageUrl) {\n        console.log('With image:', imageUrl);\n      }\n      \n      // Simulate preparation delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Create direct Farcaster cast URL for manual posting\n      const encodedText = encodeURIComponent(text);\n      let farcasterUrl = `https://warpcast.com/~/compose?text=${encodedText}`;\n      \n      if (imageUrl) {\n        const encodedImage = encodeURIComponent(imageUrl);\n        farcasterUrl += `&embeds[]=${encodedImage}`;\n      }\n      \n      return {\n        castContent: text,\n        farcasterUrl,\n        ready: true,\n      };\n    } catch (error) {\n      console.error('Error preparing cast:', error);\n      throw new Error('Failed to prepare cast for Farcaster');\n    }\n  }\n\n  async getUserProfile(fid: string): Promise<any> {\n    try {\n      const response = await fetch(`${this.hubUrl}/v1/userDataByFid?fid=${fid}`);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch user profile: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching Farcaster user profile:', error);\n      throw new Error('Failed to fetch user profile from Farcaster');\n    }\n  }\n\n  async getUserByWalletAddress(walletAddress: string): Promise<any> {\n    try {\n      // Using Warpcast API to get user by connected wallet address\n      const response = await fetch(`${this.warpcastApiUrl}/v2/user-by-verification?address=${walletAddress}`);\n      \n      if (!response.ok) {\n        if (response.status === 404) {\n          return null; // User not found on Farcaster\n        }\n        throw new Error(`Failed to fetch user by wallet: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return {\n        fid: data.result?.user?.fid,\n        username: data.result?.user?.username,\n        displayName: data.result?.user?.displayName,\n        pfpUrl: data.result?.user?.pfp?.url,\n      };\n    } catch (error) {\n      console.error('Error fetching Farcaster user by wallet:', error);\n      return null; // Return null instead of throwing to allow user creation without Farcaster\n    }\n  }\n}\n\nexport const farcasterService = new FarcasterService();\n","size_bytes":3178},"server/services/openai.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\n// Using Gemini 2.5 Flash as the default model for content generation\n// DON'T DELETE THIS COMMENT\n// Follow these instructions when using this blueprint:\n// - Note that the newest Gemini model series is \"gemini-2.5-flash\" or gemini-2.5-pro\"\n//   - do not change this unless explicitly requested by the user\n\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport class AIService {\n  async generateContent(topic: string, contentType: string, tone: string): Promise<string> {\n    try {\n      const prompt = this.buildContentPrompt(topic, contentType, tone);\n\n      const systemInstruction = \"You are an expert content creator for Farcaster, a decentralized social network. Create engaging, authentic content that follows Farcaster's culture and best practices. IMPORTANT: Keep content SHORT and CONCISE - maximum 1 paragraph only. Always include relevant emojis and structure content for social media engagement.\";\n      \n      const response = await ai.models.generateContent({\n        model: \"gemini-2.5-flash\",\n        config: {\n          systemInstruction,\n        },\n        contents: prompt,\n      });\n\n      const content = response.text;\n      if (!content) {\n        throw new Error(\"No content generated\");\n      }\n\n      return content;\n    } catch (error: any) {\n      console.error(\"Error generating content with OpenAI:\", error);\n      if (error.code === 'invalid_api_key') {\n        throw new Error(\"Invalid Gemini API key. Please check your configuration.\");\n      }\n      throw new Error(`Failed to generate content: ${error.message}`);\n    }\n  }\n\n  private buildContentPrompt(topic: string, contentType: string, tone: string): string {\n    const basePrompt = `Create a ${contentType.toLowerCase()} about \"${topic}\" in a ${tone.toLowerCase()} tone for Farcaster.`;\n    \n    let specificInstructions = \"\";\n\n    switch (contentType.toLowerCase()) {\n      case \"educational\":\n        specificInstructions = `\n        - Share one key insight or takeaway in a single paragraph\n        - Use clear, digestible information \n        - Add 1-2 relevant emojis to enhance readability\n        - End with a brief thought-provoking question\n        - Keep it concise and focused on one main point`;\n        break;\n      \n      case \"news\":\n        specificInstructions = `\n        - Start with the key news point in one sentence\n        - Briefly explain why it matters\n        - Keep it timely and relevant\n        - Use 1-2 emojis to highlight importance`;\n        break;\n      \n      case \"personal\":\n        specificInstructions = `\n        - Share a brief personal perspective\n        - Be authentic and relatable\n        - Include one key lesson learned\n        - Connect with the audience on a personal level`;\n        break;\n      \n      case \"analysis\":\n        specificInstructions = `\n        - Focus on one key industry insight\n        - Provide the most important data point\n        - Mention the main implication\n        - End with a brief future outlook`;\n        break;\n      \n      case \"creative\":\n        specificInstructions = `\n        - Tell a brief, engaging story\n        - Use one creative element\n        - Create emotional connection\n        - Have a satisfying conclusion`;\n        break;\n      \n      default:\n        specificInstructions = `\n        - Create engaging, shareable content in one paragraph\n        - Use 1-2 appropriate emojis\n        - Keep it concise but informative\n        - Include a call to action or question`;\n    }\n\n    const toneGuidance = this.getToneGuidance(tone.toLowerCase());\n\n    return `${basePrompt}\n\nRequirements:\n${specificInstructions}\n\nTone guidance:\n${toneGuidance}\n\nFormat:\n- Write for Farcaster's audience (crypto-native, tech-savvy, engaged)\n- MAXIMUM 1 PARAGRAPH - keep it short and to the point\n- Aim for 100-200 characters total (very concise)\n- Include 1-2 relevant emojis maximum\n- Make it engaging and likely to generate replies/recasts\n- NO long explanations or multiple points\n\nGenerate SHORT, FOCUSED content ready to be posted to Farcaster.`;\n  }\n\n  private getToneGuidance(tone: string): string {\n    switch (tone) {\n      case \"professional\":\n        return `\n        - Use authoritative but approachable language\n        - Include industry terminology appropriately\n        - Maintain credibility while being accessible\n        - Focus on value and insights`;\n      \n      case \"casual\":\n        return `\n        - Use conversational, friendly language\n        - Include casual expressions and slang when appropriate\n        - Be relatable and down-to-earth\n        - Feel like talking to a knowledgeable friend`;\n      \n      case \"humorous\":\n        return `\n        - Include appropriate humor and wit\n        - Use clever observations or funny analogies\n        - Keep it light but still informative\n        - Make people smile while learning`;\n      \n      default:\n        return `\n        - Use clear, engaging language\n        - Be authentic and genuine\n        - Focus on providing value to readers`;\n    }\n  }\n\n  async analyzeContent(content: string): Promise<{\n    sentiment: string;\n    readability: string;\n    engagement_potential: string;\n    suggestions: string[];\n  }> {\n    try {\n      const systemInstruction = `You are a social media content analyst. Analyze content for Farcaster and provide insights in JSON format with these fields:\n            - sentiment: overall sentiment (positive/negative/neutral)\n            - readability: how easy it is to read (high/medium/low)\n            - engagement_potential: likelihood of engagement (high/medium/low)\n            - suggestions: array of 2-3 specific improvement suggestions`;\n      \n      const response = await ai.models.generateContent({\n        model: \"gemini-2.5-pro\",\n        config: {\n          systemInstruction,\n          responseMimeType: \"application/json\",\n          responseSchema: {\n            type: \"object\",\n            properties: {\n              sentiment: { type: \"string\" },\n              readability: { type: \"string\" },\n              engagement_potential: { type: \"string\" },\n              suggestions: { type: \"array\", items: { type: \"string\" } }\n            },\n            required: [\"sentiment\", \"readability\", \"engagement_potential\", \"suggestions\"]\n          }\n        },\n        contents: `Analyze this Farcaster content: \"${content}\"`\n      });\n\n      const analysis = JSON.parse(response.text || \"{}\");\n      return {\n        sentiment: analysis.sentiment || \"neutral\",\n        readability: analysis.readability || \"medium\",\n        engagement_potential: analysis.engagement_potential || \"medium\",\n        suggestions: analysis.suggestions || []\n      };\n    } catch (error: any) {\n      console.error(\"Error analyzing content:\", error);\n      throw new Error(\"Failed to analyze content\");\n    }\n  }\n\n  async generateImagePrompt(content: string): Promise<string> {\n    try {\n      const systemInstruction = \"You are an expert at creating search queries for stock photos. Based on content, generate a concise search term that would find relevant, professional images.\";\n      \n      const response = await ai.models.generateContent({\n        model: \"gemini-2.5-flash\",\n        config: {\n          systemInstruction,\n        },\n        contents: `Generate a search term for finding relevant images for this content: \"${content.slice(0, 500)}\"`\n      });\n\n      return response.text?.trim() || \"technology\";\n    } catch (error: any) {\n      console.error(\"Error generating image prompt:\", error);\n      return \"technology\"; // Fallback\n    }\n  }\n}\n\nexport const aiService = new AIService();\n","size_bytes":7650},"server/services/pexels.ts":{"content":"interface PexelsPhoto {\n  id: number;\n  width: number;\n  height: number;\n  url: string;\n  photographer: string;\n  photographer_url: string;\n  photographer_id: number;\n  avg_color: string;\n  src: {\n    original: string;\n    large2x: string;\n    large: string;\n    medium: string;\n    small: string;\n    portrait: string;\n    landscape: string;\n    tiny: string;\n  };\n  alt: string;\n}\n\ninterface PexelsSearchResponse {\n  page: number;\n  per_page: number;\n  photos: PexelsPhoto[];\n  total_results: number;\n  next_page?: string;\n}\n\nexport class PexelsService {\n  private apiKey: string;\n  private baseUrl = 'https://api.pexels.com/v1';\n\n  constructor() {\n    this.apiKey = process.env.PEXELS_API_KEY || process.env.PEXELS_KEY || '';\n    if (!this.apiKey) {\n      throw new Error('PEXELS_API_KEY environment variable is required');\n    }\n  }\n\n  async searchPhotos(query: string, perPage: number = 6): Promise<PexelsPhoto[]> {\n    try {\n      const response = await fetch(\n        `${this.baseUrl}/search?query=${encodeURIComponent(query)}&per_page=${perPage}&orientation=landscape`,\n        {\n          headers: {\n            'Authorization': this.apiKey,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`Pexels API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data: PexelsSearchResponse = await response.json();\n      return data.photos;\n    } catch (error) {\n      console.error('Error searching Pexels photos:', error);\n      throw new Error('Failed to search photos from Pexels');\n    }\n  }\n\n  async getFeaturedPhotos(perPage: number = 6): Promise<PexelsPhoto[]> {\n    try {\n      // Use crypto-related search terms with rotation based on date\n      const cryptoTerms = [\n        'cryptocurrency bitcoin',\n        'blockchain technology',\n        'digital currency',\n        'ethereum trading',\n        'crypto investment',\n        'bitcoin mining',\n        'blockchain network',\n        'cryptocurrency exchange'\n      ];\n      \n      // Rotate search term daily\n      const dayOfYear = Math.floor(Date.now() / (1000 * 60 * 60 * 24));\n      const selectedTerm = cryptoTerms[dayOfYear % cryptoTerms.length];\n      \n      const response = await fetch(\n        `${this.baseUrl}/search?query=${encodeURIComponent(selectedTerm)}&per_page=${perPage}&orientation=landscape`,\n        {\n          headers: {\n            'Authorization': this.apiKey,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`Pexels API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data: PexelsSearchResponse = await response.json();\n      return data.photos;\n    } catch (error) {\n      console.error('Error fetching featured Pexels photos:', error);\n      throw new Error('Failed to fetch featured photos from Pexels');\n    }\n  }\n}\n\nexport const pexelsService = new PexelsService();\n","size_bytes":2971},"client/src/components/content-generator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CONTENT_TYPES, TONE_OPTIONS } from \"@/lib/constants\";\nimport { useWallet } from \"@/hooks/use-wallet\";\nimport { useLanguage } from \"@/components/language-provider\";\nimport { ContentSuggestions } from \"@/components/content-suggestions\";\nimport { Zap, Loader2, Edit3, AlertCircle, CheckCircle } from \"lucide-react\";\n\ninterface ContentGeneratorProps {\n  onContentGenerated: (content: string, source: 'ai' | 'manual') => void;\n}\n\nexport function ContentGenerator({ onContentGenerated }: ContentGeneratorProps) {\n  const [topic, setTopic] = useState(\"\");\n  const [contentType, setContentType] = useState(\"\");\n  const [tone, setTone] = useState(\"professional\");\n  const [manualContent, setManualContent] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"ai\");\n  const [lastError, setLastError] = useState<string | null>(null);\n  const { user } = useWallet();\n  const { toast } = useToast();\n  const { t } = useLanguage();\n  const queryClient = useQueryClient();\n\n  // Clear form data when language changes\n  useEffect(() => {\n    const handleLanguageChange = () => {\n      setTopic(\"\");\n      setContentType(\"\");\n      setTone(\"professional\");\n      setManualContent(\"\");\n      onContentGenerated(\"\", 'manual'); // Clear generated content too\n    };\n\n    window.addEventListener('languageChanged', handleLanguageChange);\n    return () => window.removeEventListener('languageChanged', handleLanguageChange);\n  }, [onContentGenerated]);\n\n  const generateContentMutation = useMutation({\n    mutationFn: async (data: { topic: string; contentType: string; tone: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/content/generate\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      onContentGenerated(data.content, 'ai');\n      setLastError(null);\n      toast({\n        title: t('toast.contentGenerated'),\n        description: t('toast.contentReady'),\n      });\n    },\n    onError: (error: any) => {\n      let errorMessage = error.message || t('toast.failedToGenerate');\n      let errorDescription = t('toast.tryAgainLater');\n      \n      // Handle specific AI API errors\n      if (error.message?.includes(\"quota\") || error.message?.includes(\"billing\")) {\n        errorMessage = t('toast.quotaExceeded');\n        errorDescription = t('toast.quotaExceededDesc');\n      } else if (error.message?.includes(\"api_key\") || error.message?.includes(\"unauthorized\")) {\n        errorMessage = t('toast.configIssue');\n        errorDescription = t('toast.configIssueDesc');\n      } else if (error.message?.includes(\"rate_limit\")) {\n        errorMessage = t('toast.tooManyRequests');\n        errorDescription = t('toast.tooManyRequestsDesc');\n      }\n      \n      setLastError(errorMessage);\n      toast({\n        title: errorMessage,\n        description: errorDescription,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const saveDraftMutation = useMutation({\n    mutationFn: async (draftData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/drafts\", draftData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: t('toast.draftSaved'),\n        description: t('toast.draftSavedDesc'),\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/drafts/user\", user?.id] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: t('toast.saveFailed'),\n        description: error.message || t('toast.saveFailedDesc'),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGenerate = () => {\n    if (!topic.trim()) {\n      toast({\n        title: t('toast.topicRequired'),\n        description: t('toast.topicRequiredDesc'),\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!contentType) {\n      toast({\n        title: t('toast.contentTypeRequired'),\n        description: t('toast.contentTypeRequiredDesc'),\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateContentMutation.mutate({ topic: topic.trim(), contentType, tone });\n  };\n\n  const handleManualSubmit = () => {\n    if (!manualContent.trim()) {\n      toast({\n        title: \"Content required\",\n        description: \"Please enter your content\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (manualContent.trim().length < 10) {\n      toast({\n        title: \"Content too short\",\n        description: \"Please enter at least 10 characters\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    onContentGenerated(manualContent.trim(), 'manual');\n    toast({\n      title: t('toast.manualContentReady'),\n      description: t('toast.manualContentReadyDesc'),\n    });\n  };\n\n  const handleSaveDraft = () => {\n    if (!user) {\n      toast({\n        title: \"Wallet not connected\",\n        description: \"Please connect your wallet to save drafts\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    let draftContent = null;\n    let draftTopic = \"\";\n\n    if (activeTab === \"ai\") {\n      if (!topic.trim() || !contentType) {\n        toast({\n          title: \"Missing information\",\n          description: \"Please fill in topic and content type before saving\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      draftTopic = topic.trim();\n    } else {\n      if (!manualContent.trim()) {\n        toast({\n          title: \"Missing content\",\n          description: \"Please enter your content before saving\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      draftTopic = manualContent.trim().slice(0, 50) + \"...\";\n      draftContent = manualContent.trim();\n    }\n\n    const draftData = {\n      userId: user.id,\n      topic: draftTopic,\n      contentType: activeTab === \"ai\" ? contentType : \"manual\",\n      tone: activeTab === \"ai\" ? tone : \"custom\",\n      generatedContent: draftContent,\n      selectedImage: null,\n      isPublished: false,\n    };\n\n    saveDraftMutation.mutate(draftData);\n  };\n\n  return (\n    <Card className=\"content-card border border-border h-full flex flex-col\">\n      <CardContent className=\"p-6 flex-1\">\n        <h2 className=\"text-xl font-semibold text-foreground mb-6 flex items-center\">\n          <Zap className=\"w-6 h-6 mr-2 text-accent\" />\n          {t('content.generator')}\n        </h2>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n            <TabsTrigger value=\"ai\" className=\"flex items-center gap-2\" data-testid=\"tab-ai-mode\">\n              <Zap className=\"w-4 h-4\" />\n              {t('content.aiGeneration')}\n            </TabsTrigger>\n            <TabsTrigger value=\"manual\" className=\"flex items-center gap-2\" data-testid=\"tab-manual-mode\">\n              <Edit3 className=\"w-4 h-4\" />\n              {t('content.manualInput')}\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"ai\" className=\"space-y-4\">\n            {/* Error display for AI mode */}\n            {lastError && (\n              <div className=\"flex items-center gap-2 p-3 bg-destructive/10 border border-destructive/20 rounded-lg\">\n                <AlertCircle className=\"w-4 h-4 text-destructive\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-destructive\">{lastError}</p>\n                  <p className=\"text-xs text-muted-foreground\">Try using the Manual Input mode as an alternative</p>\n                </div>\n              </div>\n            )}\n\n            <div>\n              <Label htmlFor=\"topic\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                {t('content.topic')}\n              </Label>\n              <Input\n                id=\"topic\"\n                type=\"text\"\n                placeholder={t('content.topic.placeholder')}\n                value={topic}\n                onChange={(e) => setTopic(e.target.value)}\n                className=\"w-full\"\n                data-testid=\"input-topic\"\n              />\n            </div>\n\n            {/* Quick Suggestions */}\n            <ContentSuggestions onSuggestionClick={(suggestedTopic) => setTopic(suggestedTopic)} />\n\n            <div>\n              <Label htmlFor=\"content-type\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                {t('content.type')}\n              </Label>\n              <Select value={contentType} onValueChange={setContentType}>\n                <SelectTrigger className=\"w-full\" data-testid=\"select-content-type\">\n                  <SelectValue placeholder=\"Select content type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {CONTENT_TYPES.map((type) => (\n                    <SelectItem key={type.value} value={type.value}>\n                      {type.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium text-foreground mb-2 block\">{t('content.tone')}</Label>\n              <div className=\"grid grid-cols-3 gap-2\">\n                {TONE_OPTIONS.map((toneOption) => (\n                  <Button\n                    key={toneOption.value}\n                    variant={tone === toneOption.value ? \"default\" : \"secondary\"}\n                    size=\"sm\"\n                    onClick={() => setTone(toneOption.value)}\n                    className={tone === toneOption.value ? \"bg-primary text-primary-foreground\" : \"\"}\n                    data-testid={`button-tone-${toneOption.value}`}\n                  >\n                    {toneOption.label}\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            <Button\n              onClick={handleGenerate}\n              disabled={generateContentMutation.isPending || !topic.trim() || !contentType}\n              className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-medium hover:shadow-lg transition-all duration-200 flex items-center justify-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed border-0\"\n              data-testid=\"button-generate-content\"\n            >\n              {generateContentMutation.isPending ? (\n                <>\n                  <Loader2 className=\"w-5 h-5 animate-spin\" />\n                  <span>{t('content.generate')}</span>\n                </>\n              ) : (\n                <>\n                  <Zap className=\"w-5 h-5\" />\n                  <span>{t('content.generate')}</span>\n                </>\n              )}\n            </Button>\n          </TabsContent>\n\n          <TabsContent value=\"manual\" className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"manual-content\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                {t('content.yourContent')}\n              </Label>\n              <Textarea\n                id=\"manual-content\"\n                placeholder={t('content.manualInput.placeholder')}\n                value={manualContent}\n                onChange={(e) => setManualContent(e.target.value)}\n                className=\"w-full min-h-[200px] resize-y\"\n                data-testid=\"textarea-manual-content\"\n              />\n              <div className=\"flex justify-between items-center mt-2\">\n                <span className=\"text-xs text-muted-foreground\">\n                  {manualContent.length} {t('content.characters')}\n                </span>\n                {manualContent.length >= 10 && (\n                  <div className=\"flex items-center gap-1 text-xs text-green-600\">\n                    <CheckCircle className=\"w-3 h-3\" />\n                    {t('content.readyToUse')}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <Button\n              onClick={handleManualSubmit}\n              disabled={!manualContent.trim() || manualContent.trim().length < 10}\n              className=\"w-full bg-primary text-primary-foreground font-medium hover:shadow-lg transition-all duration-200 flex items-center justify-center space-x-2 disabled:opacity-70 disabled:cursor-not-allowed\"\n              data-testid=\"button-submit-manual-content\"\n            >\n              <Edit3 className=\"w-5 h-5\" />\n              <span>{t('content.useThisContent')}</span>\n            </Button>\n          </TabsContent>\n        </Tabs>\n\n        <Button\n          onClick={handleSaveDraft}\n          disabled={saveDraftMutation.isPending || !user}\n          variant=\"secondary\"\n          className=\"w-full mt-4\"\n          data-testid=\"button-save-draft\"\n        >\n          {saveDraftMutation.isPending ? (\n            <>\n              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              {t('button.saving')}\n            </>\n          ) : (\n            t('button.saveAsDraft')\n          )}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":13485},"client/src/components/content-preview.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { useWallet } from \"@/hooks/use-wallet\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useState, useEffect } from \"react\";\nimport { Eye, Send, Edit, User, Loader2, MessageCircle, Repeat, Heart, Share, ExternalLink } from \"lucide-react\";\nimport { useLanguage } from \"@/components/language-provider\";\n\ninterface PexelsPhoto {\n  id: number;\n  src: {\n    medium: string;\n    large: string;\n  };\n  alt: string;\n  photographer: string;\n}\n\ninterface UploadedImage {\n  id: string;\n  src: {\n    medium: string;\n    large: string;\n  };\n  alt: string;\n  photographer: string;\n  isUploaded: true;\n  file: File;\n}\n\ntype ImageType = PexelsPhoto | UploadedImage;\n\ninterface ContentPreviewProps {\n  content: string;\n  selectedImage: ImageType | null;\n  contentSource: 'ai' | 'manual' | null;\n  onContentChange: (content: string) => void;\n  onResetFields?: () => void;\n}\n\nexport function ContentPreview({ content, selectedImage, contentSource, onContentChange, onResetFields }: ContentPreviewProps) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedContent, setEditedContent] = useState(content);\n  const [showFidModal, setShowFidModal] = useState(false);\n  const [farcasterFid, setFarcasterFid] = useState(\"\");\n  const [pendingPublishData, setPendingPublishData] = useState<{ content: string; imageUrl?: string } | null>(null);\n  const [castPreparation, setCastPreparation] = useState<{ farcasterUrl: string; castContent: string } | null>(null);\n  const { user, displayName, updateUser } = useWallet();\n  const { toast } = useToast();\n  const { t } = useLanguage();\n\n  // Native Farcaster compose function using Mini Apps SDK\n  const openNativeFarcasterCompose = async (content: string, imageUrl?: string) => {\n    try {\n      // Import and use Farcaster Mini Apps SDK\n      const { sdk } = await import('@farcaster/miniapp-sdk');\n      \n      // Prepare embeds array (SDK expects specific array types)\n      const embeds: [] | [string] | [string, string] = imageUrl ? [imageUrl] : [];\n      \n      // Use native Farcaster compose with content and image\n      const result = await sdk.actions.composeCast({\n        text: content,\n        embeds: embeds,\n      });\n      \n      console.log('Farcaster compose result:', result);\n      \n      toast({\n        title: t('content.castOpened'),\n        description: t('content.nativeFarcasterOpened'),\n      });\n      \n      // Reset fields after native cast success\n      if (onResetFields) {\n        setTimeout(() => {\n          onResetFields();\n        }, 1000); // Small delay to let user see the success message\n      }\n      \n      return true;\n    } catch (error) {\n      console.warn('Native Farcaster compose not available, falling back to URL:', error);\n      return false;\n    }\n  };\n\n  const publishMutation = useMutation({\n    mutationFn: async (data: { content: string; imageUrl?: string }) => {\n      const preparedContent = data.content.trim();\n      \n      // Try native compose first\n      const nativeSuccess = await openNativeFarcasterCompose(preparedContent, data.imageUrl);\n      \n      if (!nativeSuccess) {\n        // Create Farcaster compose URL as fallback\n        let farcasterUrl = `https://warpcast.com/~/compose?text=${encodeURIComponent(preparedContent)}`;\n        \n        // Add image to the compose URL if available\n        if (data.imageUrl) {\n          farcasterUrl += `&embeds[]=${encodeURIComponent(data.imageUrl)}`;\n        }\n        \n        return {\n          castContent: preparedContent,\n          farcasterUrl: farcasterUrl,\n          success: true,\n          useNative: false\n        };\n      }\n      \n      return {\n        castContent: preparedContent,\n        success: true,\n        useNative: true\n      };\n    },\n    onSuccess: (data) => {\n      if (!data.useNative && data.farcasterUrl) {\n        // Open Farcaster URL in new tab as fallback\n        window.open(data.farcasterUrl, '_blank');\n        \n        toast({\n          title: t('content.castPrepared'),\n          description: t('content.shareManually'),\n        });\n      }\n      \n      // Reset all fields after successful cast\n      if (onResetFields) {\n        setTimeout(() => {\n          onResetFields();\n        }, 1000); // Small delay to let user see the success message\n      }\n    },\n    onError: (error: any) => {\n      // Check if error is due to missing Farcaster FID\n      if (error.message && error.message.includes(\"Farcaster FID not set\")) {\n        setShowFidModal(true);\n        setPendingPublishData({\n          content: content.trim(),\n          imageUrl: selectedImage?.src.large,\n        });\n      } else {\n        toast({\n          title: t('content.publishingFailed'),\n          description: error.message || t('content.failedToPublish'),\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const handleSaveEdit = () => {\n    onContentChange(editedContent);\n    setIsEditing(false);\n    toast({\n      title: t('content.contentUpdated'),\n      description: t('content.changesSaved'),\n    });\n  };\n\n  const handleCancelEdit = () => {\n    setEditedContent(content);\n    setIsEditing(false);\n  };\n\n  const handlePublish = () => {\n    if (!content.trim()) {\n      toast({\n        title: t('content.noContentToPrepare'),\n        description: t('content.generateContentFirst'),\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check wallet requirement only for AI content\n    if (contentSource === 'ai' && !user) {\n      toast({\n        title: t('wallet.aiContentRequiresWallet'),\n        description: t('wallet.connectWalletToCastAI'),\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    publishMutation.mutate({\n      content: content.trim(),\n      imageUrl: selectedImage?.src.large,\n    });\n  };\n\n  // Update local edited content when external content changes\n  useEffect(() => {\n    setEditedContent(content);\n  }, [content]);\n\n  return (\n    <Card className=\"content-card border border-border\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-foreground flex items-center\">\n            <Eye className=\"w-5 h-5 mr-2 text-accent\" />\n            {t('content.preview')}\n          </h3>\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={() => setIsEditing(!isEditing)}\n            data-testid=\"button-edit-content\"\n          >\n            <Edit className=\"w-4 h-4 mr-1\" />\n            {isEditing ? t('content.cancel') : t('content.edit')}\n          </Button>\n        </div>\n\n        {/* Cast Preview */}\n        <div className=\"border border-border rounded-xl p-4 bg-muted/50 mb-6\">\n          <div className=\"flex items-start space-x-3 mb-3\">\n            <div className=\"w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center\">\n              <User className=\"w-4 h-4 text-primary\" />\n            </div>\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"font-medium text-foreground\" data-testid=\"preview-username\">\n                  {displayName || t('preview.yourUsername')}\n                </span>\n                <span className=\"text-sm text-muted-foreground\">{t('preview.now')}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Content Area */}\n          <div className=\"space-y-3 mb-4\">\n            {isEditing ? (\n              <div className=\"space-y-3\">\n                <Textarea\n                  value={editedContent}\n                  onChange={(e) => setEditedContent(e.target.value)}\n                  className=\"min-h-[120px] resize-none\"\n                  placeholder={t('content.editPlaceholder') || 'Edit your content here...'}\n                  data-testid=\"textarea-edit-content\"\n                />\n                <div className=\"flex gap-2\">\n                  <Button \n                    size=\"sm\" \n                    onClick={handleSaveEdit}\n                    data-testid=\"button-save-edit\"\n                  >\n                    {t('content.saveChanges')}\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"secondary\" \n                    onClick={handleCancelEdit}\n                    data-testid=\"button-cancel-edit\"\n                  >\n                    {t('content.cancel')}\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <>\n                <div className=\"text-foreground leading-relaxed whitespace-pre-wrap\" data-testid=\"preview-content\">\n                  {content || (\n                    <span className=\"text-muted-foreground italic\">\n                      {t('content.generatedContentPlaceholder') || 'Generated content will appear here...'}\n                    </span>\n                  )}\n                </div>\n                {content && (\n                  <p className=\"text-muted-foreground text-sm flex items-center\">\n                    <Eye className=\"w-4 h-4 mr-1\" />\n                    Generated by FarcastAI\n                  </p>\n                )}\n              </>\n            )}\n          </div>\n\n          {/* Selected Image */}\n          {selectedImage && (\n            <div className=\"mb-4\">\n              <img\n                src={selectedImage.src.medium}\n                alt={selectedImage.alt}\n                className=\"w-full max-h-64 object-contain rounded-lg\"\n                data-testid=\"preview-image\"\n              />\n            </div>\n          )}\n\n          {/* Engagement Preview */}\n          <div className=\"flex items-center justify-between pt-3 border-t border-border\">\n            <div className=\"flex items-center space-x-6\">\n              <button className=\"flex items-center space-x-2 text-muted-foreground hover:text-foreground transition-colors\">\n                <MessageCircle className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Reply</span>\n              </button>\n              <button className=\"flex items-center space-x-2 text-muted-foreground hover:text-foreground transition-colors\">\n                <Repeat className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Recast</span>\n              </button>\n              <button className=\"flex items-center space-x-2 text-muted-foreground hover:text-foreground transition-colors\">\n                <Heart className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Like</span>\n              </button>\n            </div>\n            <button className=\"text-muted-foreground hover:text-foreground transition-colors\">\n              <Share className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"space-y-4\">\n          <Button\n            onClick={handlePublish}\n            disabled={publishMutation.isPending || !content.trim()}\n            className=\"w-full farcaster-purple text-white font-medium hover:shadow-lg transition-all duration-200 flex items-center justify-center space-x-2\"\n            data-testid=\"button-publish-to-farcaster\"\n          >\n            {publishMutation.isPending ? (\n              <>\n                <Loader2 className=\"w-5 h-5 animate-spin\" />\n                <span>{t('content.preparing')}</span>\n              </>\n            ) : (\n              <>\n                <Send className=\"w-5 h-5\" />\n                <span>{t('content.prepare')}</span>\n              </>\n            )}\n          </Button>\n\n          {/* Cast Preparation Result */}\n          {castPreparation && (\n            <div \n              className=\"bg-green-50 dark:bg-green-950 border border-green-200 dark:border-green-800 rounded-lg p-4 space-y-3\"\n              data-testid=\"cast-preparation-result\"\n            >\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                <p className=\"text-sm font-medium text-green-700 dark:text-green-300\">\n                  Cast hazÄ±rlandÄ±! Manuel olarak Farcaster'da paylaÅŸÄ±n\n                </p>\n              </div>\n              \n              <div className=\"bg-white dark:bg-gray-800 rounded-lg p-3 border\">\n                <p className=\"text-xs text-muted-foreground mb-2\">HazÄ±rlanan iÃ§erik:</p>\n                <p className=\"text-sm text-foreground\">{castPreparation.castContent}</p>\n              </div>\n              \n              <Button\n                onClick={() => window.open(castPreparation.farcasterUrl, '_blank')}\n                className=\"w-full bg-purple-600 hover:bg-purple-700 text-white\"\n                data-testid=\"button-open-farcaster\"\n              >\n                <ExternalLink className=\"w-4 h-4 mr-2\" />\n                Farcaster'da AÃ§ ve PaylaÅŸ\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setCastPreparation(null)}\n                className=\"w-full text-muted-foreground\"\n                data-testid=\"button-close-preparation\"\n              >\n                Kapat\n              </Button>\n            </div>\n          )}\n\n          {/* Demo Mode Indicator - Only show when demo mode is enabled */}\n          {import.meta.env.VITE_DEMO_MODE === 'true' && (\n            <div \n              className=\"bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-3\"\n              data-testid=\"status-demo-mode\"\n            >\n              <p className=\"text-sm text-blue-700 dark:text-blue-300 text-center\">\n                âš¡ Demo Mode: Casts are simulated - Not sent to real Farcaster\n              </p>\n            </div>\n          )}\n\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":14240},"client/src/components/corner-wallet-widget.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useWallet } from \"@/hooks/use-wallet\";\nimport { \n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { \n  Popover, \n  PopoverContent, \n  PopoverTrigger \n} from \"@/components/ui/popover\";\nimport { \n  Wallet, \n  User, \n  LogOut, \n  Check,\n  ChevronDown\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/components/language-provider\";\n\nexport function CornerWalletWidget() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isConnectMenuOpen, setIsConnectMenuOpen] = useState(false);\n  const { isConnected, address, ensName, ensAvatar, displayName, user, connecting, connect, connectFarcasterWallet, disconnect, usdcBalance, ethBalance, solBalance } = useWallet();\n  const { t } = useLanguage();\n  const { toast } = useToast();\n\n\n  const handleFarcasterConnect = async () => {\n    setIsConnectMenuOpen(false);\n    try {\n      const success = await connectFarcasterWallet();\n      if (success) {\n        toast({\n          title: t('wallet.farcasterConnected'),\n          description: t('wallet.farcasterConnectedDesc'),\n        });\n      } else {\n        throw new Error(\"Failed to connect Farcaster wallet\");\n      }\n    } catch (error) {\n      console.error(\"Farcaster connection failed:\", error);\n      toast({\n        title: t('wallet.connectionFailed'),\n        description: t('wallet.connectionFailedDesc'),\n        variant: \"destructive\",\n      });\n    }\n  };\n\n\n  const handleDisconnect = () => {\n    disconnect();\n    setIsOpen(false);\n    toast({\n      title: t('wallet.disconnected'),\n      description: t('wallet.disconnectedDesc'),\n    });\n  };\n\n  const getDisplayName = () => {\n    // Priority: Farcaster username > Farcaster display name > ENS name > shortened address\n    if (user?.farcasterUsername) return `@${user.farcasterUsername}`;\n    if (user?.farcasterDisplayName) return user.farcasterDisplayName;\n    if (ensName) return ensName;\n    if (displayName) return displayName;\n    if (address) return `${address.slice(0, 6)}...${address.slice(-4)}`;\n    return t('wallet.unknown');\n  };\n\n  // Connected state - show username\n  if (isConnected && address) {\n    return (\n      <div className=\"md:fixed md:top-4 md:right-24 z-50\">\n        <Popover open={isOpen} onOpenChange={setIsOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              className=\"bg-background/95 backdrop-blur-sm border border-border hover:bg-accent/10 transition-all duration-200 shadow-lg\"\n              data-testid=\"button-wallet-connected\"\n            >\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n                {user?.farcasterAvatar ? (\n                  <img \n                    src={user.farcasterAvatar} \n                    alt=\"Farcaster Avatar\" \n                    className=\"w-5 h-5 rounded-full object-cover\"\n                    onError={(e) => {\n                      // Fall back to user icon if image fails to load\n                      (e.currentTarget as HTMLImageElement).style.display = 'none';\n                      (e.currentTarget.nextElementSibling as HTMLElement)!.style.display = 'block';\n                    }}\n                  />\n                ) : ensAvatar ? (\n                  <img \n                    src={ensAvatar} \n                    alt=\"ENS Avatar\" \n                    className=\"w-5 h-5 rounded-full object-cover\"\n                    onError={(e) => {\n                      // Fall back to user icon if image fails to load\n                      (e.currentTarget as HTMLImageElement).style.display = 'none';\n                      (e.currentTarget.nextElementSibling as HTMLElement)!.style.display = 'block';\n                    }}\n                  />\n                ) : null}\n                <User className={`w-4 h-4 ${user?.farcasterAvatar || ensAvatar ? 'hidden' : ''}`} />\n                <span className=\"font-medium\">{getDisplayName()}</span>\n                <ChevronDown className=\"w-3 h-3 opacity-50\" />\n              </div>\n            </Button>\n          </PopoverTrigger>\n          \n          <PopoverContent \n            className=\"w-80 p-0 mr-4\" \n            side=\"bottom\" \n            align=\"end\"\n            data-testid=\"popover-wallet-details\"\n          >\n            <div className=\"p-4 space-y-4\">\n              {/* Header */}\n              <div className=\"flex items-center space-x-3\">\n                {user?.farcasterAvatar ? (\n                  <img \n                    src={user.farcasterAvatar} \n                    alt=\"Farcaster Avatar\" \n                    className=\"w-8 h-8 rounded-full object-cover border-2 border-green-500/20\"\n                    onError={(e) => {\n                      // Fall back to standard check icon if image fails to load\n                      (e.currentTarget as HTMLImageElement).style.display = 'none';\n                      (e.currentTarget.nextElementSibling as HTMLElement)!.style.display = 'flex';\n                    }}\n                  />\n                ) : ensAvatar ? (\n                  <img \n                    src={ensAvatar} \n                    alt=\"ENS Avatar\" \n                    className=\"w-8 h-8 rounded-full object-cover border-2 border-green-500/20\"\n                    onError={(e) => {\n                      // Fall back to standard check icon if image fails to load\n                      (e.currentTarget as HTMLImageElement).style.display = 'none';\n                      (e.currentTarget.nextElementSibling as HTMLElement)!.style.display = 'flex';\n                    }}\n                  />\n                ) : null}\n                <div className={`w-8 h-8 bg-green-500/20 rounded-full flex items-center justify-center ${user?.farcasterAvatar || ensAvatar ? 'hidden' : ''}`}>\n                  <Check className=\"w-4 h-4 text-green-500\" />\n                </div>\n                <div>\n                  <p className=\"font-semibold text-foreground\">{t('wallet.connected')}</p>\n                  <p className=\"text-sm text-muted-foreground\">{t('wallet.farcasterConnectedDesc')}</p>\n                </div>\n              </div>\n\n              {/* User Info */}\n              <div className=\"space-y-2 p-3 bg-muted/50 rounded-lg\">\n                {ensName && (\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">{t('wallet.ensName')}</p>\n                    <p className=\"font-medium text-orange-500\" data-testid=\"text-ens-name\">{ensName}</p>\n                  </div>\n                )}\n                \n                {user?.farcasterDisplayName && (\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">{t('wallet.displayName')}</p>\n                    <p className=\"font-medium\" data-testid=\"text-display-name\">{user.farcasterDisplayName}</p>\n                  </div>\n                )}\n                \n                {user?.farcasterUsername && (\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">{t('wallet.username')}</p>\n                    <p className=\"font-medium text-primary\" data-testid=\"text-username\">@{user.farcasterUsername}</p>\n                  </div>\n                )}\n\n                {user?.farcasterFid && (\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">{t('wallet.farcasterID')}</p>\n                    <p className=\"font-mono text-sm\" data-testid=\"text-farcaster-id\">{user.farcasterFid}</p>\n                  </div>\n                )}\n\n                {/* Balance Display */}\n                {(usdcBalance || ethBalance || solBalance) && (\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Bakiyeler</p>\n                    <div className=\"flex items-center space-x-2 mt-1\">\n                      {usdcBalance && usdcBalance !== '0.00' && (\n                        <span className=\"bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded text-sm font-medium flex items-center space-x-1\">\n                          <span className=\"text-green-600\">$</span>\n                          <span>${usdcBalance} USDC</span>\n                        </span>\n                      )}\n                      {ethBalance && ethBalance !== '0.0000' && (\n                        <span className=\"bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded text-sm font-medium flex items-center space-x-1\">\n                          <span className=\"text-blue-600\">Îž</span>\n                          <span>{ethBalance} ETH</span>\n                        </span>\n                      )}\n                      {solBalance && solBalance !== '0.0000' && (\n                        <span className=\"bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 px-2 py-1 rounded text-sm font-medium flex items-center space-x-1\">\n                          <span className=\"text-purple-600\">â—Ž</span>\n                          <span>{solBalance} SOL</span>\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                )}\n                \n                <div>\n                  <p className=\"text-xs text-muted-foreground\">{t('wallet.address')}</p>\n                  <div className=\"flex items-center space-x-2\">\n                    <p className=\"font-mono text-sm\" data-testid=\"text-wallet-address\">\n                      {address ? `${address.slice(0, 6)}...${address.slice(-4)}` : 'Loading...'}\n                    </p>\n                    {address && (\n                      <button \n                        onClick={() => window.open(`https://basescan.org/address/${address}`, '_blank')}\n                        className=\"text-blue-500 hover:text-blue-700 transition-colors\"\n                        data-testid=\"button-basescan-link\"\n                      >\n                        <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\" />\n                        </svg>\n                      </button>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Disconnect Button */}\n              <Button\n                variant=\"destructive\"\n                onClick={handleDisconnect}\n                className=\"w-full\"\n                data-testid=\"button-disconnect\"\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                {t('wallet.disconnect')}\n              </Button>\n            </div>\n          </PopoverContent>\n        </Popover>\n      </div>\n    );\n  }\n\n  // Disconnected state - show connect options\n  return (\n    <div className=\"md:fixed md:top-4 md:right-24 z-50\">\n      <Dialog open={isConnectMenuOpen} onOpenChange={setIsConnectMenuOpen}>\n        <DialogTrigger asChild>\n          <Button\n            variant=\"outline\"\n            className=\"bg-blue-600 hover:bg-blue-700 text-white border-blue-600 hover:border-blue-700 backdrop-blur-sm transition-all duration-200 shadow-lg font-medium\"\n            disabled={connecting}\n            data-testid=\"button-wallet-connect\"\n          >\n            <div className=\"flex items-center space-x-2\">\n              <Wallet className=\"w-4 h-4\" />\n              <span className=\"font-medium\">\n                {connecting ? t('wallet.connecting') : t('wallet.connect')}\n              </span>\n            </div>\n          </Button>\n        </DialogTrigger>\n        \n        <DialogContent className=\"sm:max-w-md md:max-w-lg mx-auto my-auto border-0 shadow-2xl bg-white dark:bg-gray-900 rounded-3xl overflow-hidden\">\n          <div className=\"p-6\">\n            <DialogHeader className=\"text-center space-y-3 mb-6\">\n              <div className=\"mx-auto w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center\">\n                <Wallet className=\"w-6 h-6 text-white\" />\n              </div>\n              <DialogTitle className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n                {t('wallet.connectYourWallet')}\n              </DialogTitle>\n              <DialogDescription className=\"text-sm text-gray-600 dark:text-gray-400\">\n                {t('wallet.chooseWalletToConnect')}\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"space-y-3\">\n              <Button\n                variant=\"outline\"\n                onClick={handleFarcasterConnect}\n                disabled={connecting}\n                className=\"w-full h-auto p-4 border-2 hover:border-purple-200 dark:hover:border-purple-800 hover:bg-purple-50 dark:hover:bg-purple-950/30 transition-all duration-200 rounded-2xl\"\n                data-testid=\"button-connect-farcaster\"\n              >\n                <div className=\"flex items-center space-x-4 w-full\">\n                  <div className=\"w-12 h-12 bg-purple-500/10 rounded-xl flex items-center justify-center\">\n                    <User className=\"w-6 h-6 text-purple-600 dark:text-purple-400\" />\n                  </div>\n                  <div className=\"text-left flex-1\">\n                    <p className=\"font-semibold text-gray-900 dark:text-white\">{t('wallet.farcaster')}</p>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">{t('wallet.connectWallet')}</p>\n                  </div>\n                </div>\n              </Button>\n\n            </div>\n\n            <p className=\"text-xs text-gray-500 dark:text-gray-400 text-center mt-6\">\n              {t('wallet.termsOfService')}\n            </p>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":13996},"client/src/components/image-selector.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/components/language-provider\";\nimport { Image as ImageIcon, Search, Loader2, Upload, X, FileImage } from \"lucide-react\";\n\ninterface PexelsPhoto {\n  id: number;\n  src: {\n    medium: string;\n    large: string;\n  };\n  alt: string;\n  photographer: string;\n}\n\ninterface UploadedImage {\n  id: string;\n  src: {\n    medium: string;\n    large: string;\n  };\n  alt: string;\n  photographer: string;\n  isUploaded: true;\n  file: File;\n}\n\ntype ImageType = PexelsPhoto | UploadedImage;\n\ninterface ImageSelectorProps {\n  selectedImage: ImageType | null;\n  onImageSelect: (image: ImageType) => void;\n}\n\nexport function ImageSelector({ selectedImage, onImageSelect }: ImageSelectorProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [uploadedImages, setUploadedImages] = useState<UploadedImage[]>([]);\n  const [activeTab, setActiveTab] = useState(\"pexels\");\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const { t } = useLanguage();\n\n  // Fetch featured images by default\n  const { data: featuredImages, isLoading: loadingFeatured } = useQuery({\n    queryKey: [\"/api/images/featured\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/images/featured?per_page=6\");\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch featured images\");\n      }\n      return response.json();\n    },\n  });\n\n  // Search images when search term changes\n  const { data: searchResults, isLoading: loadingSearch } = useQuery({\n    queryKey: [\"/api/images/search\", searchTerm],\n    queryFn: async () => {\n      if (!searchTerm) return null;\n      const response = await fetch(`/api/images/search?q=${encodeURIComponent(searchTerm)}&per_page=6`);\n      if (!response.ok) {\n        throw new Error(\"Failed to search images\");\n      }\n      return response.json();\n    },\n    enabled: !!searchTerm,\n  });\n\n  const handleSearch = () => {\n    if (!searchQuery.trim()) {\n      toast({\n        title: t('image.searchRequired'),\n        description: t('image.enterSearchTerm'),\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setSearchTerm(searchQuery.trim());\n  };\n\n  const handleImageSelect = (image: ImageType) => {\n    onImageSelect(image);\n    toast({\n      title: t('image.selected'),\n      description: (image as any).isUploaded ? t('image.uploadedSelected') : t('image.stockPhotoSelected'),\n    });\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    \n    files.forEach((file) => {\n      // Validate file type\n      if (!file.type.startsWith('image/')) {\n        toast({\n          title: t('image.invalidFileType'),\n          description: \"Please upload an image file (JPG, PNG, GIF, etc.)\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Validate file size (max 10MB)\n      if (file.size > 10 * 1024 * 1024) {\n        toast({\n          title: t('image.fileTooLarge'),\n          description: \"Please upload an image smaller than 10MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Create object URL for preview\n      const imageUrl = URL.createObjectURL(file);\n      \n      const uploadedImage: UploadedImage = {\n        id: `upload-${Date.now()}-${Math.random()}`,\n        src: {\n          medium: imageUrl,\n          large: imageUrl,\n        },\n        alt: file.name,\n        photographer: \"You\",\n        isUploaded: true,\n        file: file,\n      };\n\n      setUploadedImages(prev => [...prev, uploadedImage]);\n      \n      toast({\n        title: t('image.imageUploaded'),\n        description: `${file.name} has been uploaded successfully`,\n      });\n    });\n\n    // Clear the input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const handleRemoveUploadedImage = (imageId: string) => {\n    setUploadedImages(prev => {\n      const image = prev.find(img => img.id === imageId);\n      if (image) {\n        // Revoke the object URL to free up memory\n        URL.revokeObjectURL(image.src.medium);\n      }\n      return prev.filter(img => img.id !== imageId);\n    });\n    \n    // If the removed image was selected, clear selection\n    if (selectedImage && 'isUploaded' in selectedImage && selectedImage.id === imageId) {\n      onImageSelect(null as any);\n    }\n  };\n\n  const triggerFileUpload = () => {\n    fileInputRef.current?.click();\n  };\n\n  const pexelsImages = searchResults || featuredImages || [];\n  const isLoading = loadingFeatured || loadingSearch;\n\n  return (\n    <Card className=\"content-card border border-border h-full flex flex-col\">\n      <CardContent className=\"p-6 flex-1\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n          <ImageIcon className=\"w-5 h-5 mr-2 text-accent\" />\n          {t('image.producer')}\n        </h3>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 mb-4\">\n            <TabsTrigger value=\"pexels\" className=\"flex items-center gap-2\" data-testid=\"tab-pexels\">\n              <Search className=\"w-4 h-4\" />\n              {t('image.stockPhotos')}\n            </TabsTrigger>\n            <TabsTrigger value=\"upload\" className=\"flex items-center gap-2\" data-testid=\"tab-upload\">\n              <Upload className=\"w-4 h-4\" />\n              {t('image.uploadImage')}\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"pexels\" className=\"space-y-4\">\n            {/* Search Interface */}\n            <div>\n              <Label htmlFor=\"image-search\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                {t('image.searchStockPhotos')}\n              </Label>\n              <div className=\"flex gap-2\">\n                <Input\n                  id=\"image-search\"\n                  type=\"text\"\n                  placeholder={t('image.searchPlaceholder')}\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  onKeyDown={(e) => e.key === \"Enter\" && handleSearch()}\n                  className=\"flex-1\"\n                  data-testid=\"input-image-search\"\n                />\n                <Button \n                  onClick={handleSearch}\n                  disabled={isLoading || !searchQuery.trim()}\n                  data-testid=\"button-search-images\"\n                >\n                  {loadingSearch ? (\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                  ) : (\n                    <Search className=\"w-4 h-4\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n\n            {/* Pexels Image Grid */}\n            {isLoading ? (\n              <div className=\"grid grid-cols-2 gap-3\">\n                {Array.from({ length: 4 }).map((_, index) => (\n                  <div\n                    key={index}\n                    className=\"w-full aspect-video bg-muted rounded-lg animate-pulse\"\n                  />\n                ))}\n              </div>\n            ) : pexelsImages.length > 0 ? (\n              <div className=\"grid grid-cols-2 gap-3\">\n                {pexelsImages.map((image: PexelsPhoto) => (\n                  <div\n                    key={image.id}\n                    className={`relative group cursor-pointer transition-all duration-200 ${\n                      selectedImage?.id === image.id\n                        ? \"ring-2 ring-primary\"\n                        : \"hover:ring-2 hover:ring-primary/50\"\n                    }`}\n                    onClick={() => handleImageSelect(image)}\n                    data-testid={`image-option-${image.id}`}\n                  >\n                    <img\n                      src={image.src.medium}\n                      alt={image.alt}\n                      className=\"w-full max-h-32 object-contain rounded-lg\"\n                      loading=\"lazy\"\n                    />\n                    {selectedImage?.id === image.id && (\n                      <div className=\"absolute inset-0 bg-primary/20 rounded-lg flex items-center justify-center\">\n                        <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                          <ImageIcon className=\"w-4 h-4 text-primary-foreground\" />\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <ImageIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-2\" />\n                <p className=\"text-muted-foreground\">\n                  {searchTerm ? \"No images found for your search\" : \"Search for images to get started\"}\n                </p>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"upload\" className=\"space-y-4\">\n            {/* File Upload Interface */}\n            <div>\n              <Label className=\"text-sm font-medium text-foreground mb-2 block\">\n                {t('image.uploadYourImages')}\n              </Label>\n              \n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                accept=\"image/*\"\n                multiple\n                onChange={handleFileUpload}\n                className=\"hidden\"\n                data-testid=\"input-file-upload\"\n              />\n              \n              <div\n                onClick={triggerFileUpload}\n                className=\"border-2 border-dashed border-border rounded-lg p-8 text-center cursor-pointer hover:border-primary/50 transition-colors\"\n                data-testid=\"drop-zone-upload\"\n              >\n                <Upload className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n                <p className=\"text-sm font-medium text-foreground mb-1\">\n                  {t('image.clickToUpload')}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  Supports JPG, PNG, GIF up to 10MB\n                </p>\n              </div>\n            </div>\n\n            {/* Uploaded Images Grid */}\n            {uploadedImages.length > 0 ? (\n              <div>\n                <Label className=\"text-sm font-medium text-foreground mb-2 block\">\n                  Your Uploaded Images ({uploadedImages.length})\n                </Label>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  {uploadedImages.map((image: UploadedImage) => (\n                    <div\n                      key={image.id}\n                      className={`relative group cursor-pointer transition-all duration-200 ${\n                        selectedImage?.id === image.id\n                          ? \"ring-2 ring-primary\"\n                          : \"hover:ring-2 hover:ring-primary/50\"\n                      }`}\n                      data-testid={`uploaded-image-${image.id}`}\n                    >\n                      <img\n                        src={image.src.medium}\n                        alt={image.alt}\n                        className=\"w-full max-h-32 object-contain rounded-lg\"\n                        onClick={() => handleImageSelect(image)}\n                      />\n                      \n                      {/* Selection indicator */}\n                      {selectedImage?.id === image.id && (\n                        <div className=\"absolute inset-0 bg-primary/20 rounded-lg flex items-center justify-center\">\n                          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                            <ImageIcon className=\"w-4 h-4 text-primary-foreground\" />\n                          </div>\n                        </div>\n                      )}\n                      \n                      {/* Remove button */}\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        className=\"absolute top-1 right-1 w-6 h-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleRemoveUploadedImage(image.id);\n                        }}\n                        data-testid={`button-remove-${image.id}`}\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </Button>\n                      \n                      {/* File info */}\n                      <div className=\"absolute bottom-0 left-0 right-0 bg-black/50 text-white text-xs p-1 rounded-b-lg\">\n                        <FileImage className=\"w-3 h-3 inline mr-1\" />\n                        {image.file.name.length > 15 ? `${image.file.name.slice(0, 15)}...` : image.file.name}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Upload className=\"w-12 h-12 text-muted-foreground mx-auto mb-2\" />\n                <p className=\"text-muted-foreground\">{t('image.noUploadedImages')}</p>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Upload images to get started\n                </p>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":13901},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"dark\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n  storageKey = \"farcastai-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1608},"client/src/components/wallet-connection.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useWallet } from \"@/hooks/use-wallet\";\nimport { Wallet, Check, User } from \"lucide-react\";\n\nexport function WalletConnection() {\n  const { isConnected, address, user, connecting, connect, disconnect } = useWallet();\n\n  return (\n    <Card className=\"content-card border border-border\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h2 className=\"text-lg font-semibold text-foreground mb-1\">Wallet Connection</h2>\n            <p className=\"text-sm text-muted-foreground\">Connect your wallet to start creating content</p>\n          </div>\n          <div className=\"w-10 h-10 bg-secondary rounded-full flex items-center justify-center\">\n            <Wallet className=\"w-5 h-5 text-muted-foreground\" />\n          </div>\n        </div>\n\n        {isConnected && address ? (\n          <>\n            {/* Connected State */}\n            <div className=\"flex items-center justify-between p-4 bg-primary/10 border border-primary/20 rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                  <Check className=\"w-4 h-4 text-primary-foreground\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-foreground\" data-testid=\"wallet-address\">\n                    {address.slice(0, 6)}...{address.slice(-4)}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Connected via Wallet</p>\n                </div>\n              </div>\n              <Button \n                variant=\"secondary\" \n                size=\"sm\"\n                onClick={disconnect}\n                data-testid=\"button-disconnect-wallet\"\n              >\n                Disconnect\n              </Button>\n            </div>\n\n            {/* Farcaster Profile Info */}\n            {user && (\n              <div className=\"mt-4 p-4 bg-muted/50 rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-primary/20 rounded-full flex items-center justify-center\">\n                    <User className=\"w-5 h-5 text-primary\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-foreground\" data-testid=\"user-display-name\">\n                      {user.farcasterDisplayName || user.farcasterUsername || \"Not set\"}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      FID: <span data-testid=\"user-fid\">{user.farcasterFid || \"Not connected\"}</span>\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n          </>\n        ) : (\n          /* Disconnected State */\n          <div className=\"text-center py-8\">\n            <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Wallet className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <p className=\"text-muted-foreground mb-4\">No wallet connected</p>\n            <Button \n              onClick={connect} \n              disabled={connecting}\n              className=\"wallet-gradient hover:opacity-90 transition-opacity\"\n              data-testid=\"button-connect-wallet\"\n            >\n              {connecting ? \"Connecting...\" : \"Connect Wallet\"}\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3647},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 2000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3892},"client/src/hooks/use-wallet.tsx":{"content":"import { useState, useEffect, createContext, useContext, ReactNode, useMemo } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/components/language-provider\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\ninterface WalletContextType {\n  isConnected: boolean;\n  address: string | null;\n  ensName: string | null;\n  ensAvatar: string | null;\n  displayName: string | null;\n  usdcBalance: string | null;\n  ethBalance: string | null;\n  solBalance: string | null;\n  user: User | null;\n  connecting: boolean;\n  connect: () => Promise<void>;\n  connectFarcasterWallet: () => Promise<boolean>;\n  disconnect: () => void;\n  updateUser: (userData: Partial<User>) => Promise<void>;\n}\n\nconst WalletContext = createContext<WalletContextType | undefined>(undefined);\n\nexport function WalletProvider({ children }: { children: ReactNode }) {\n  const [isConnected, setIsConnected] = useState(false);\n  const [address, setAddress] = useState<string | null>(null);\n  const [ensName, setEnsName] = useState<string | null>(null);\n  const [ensAvatar, setEnsAvatar] = useState<string | null>(null);\n  const [usdcBalance, setUsdcBalance] = useState<string | null>(null);\n  const [ethBalance, setEthBalance] = useState<string | null>(null);\n  const [solBalance, setSolBalance] = useState<string | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [connecting, setConnecting] = useState(false);\n  const { toast } = useToast();\n  const { t } = useLanguage();\n\n  // Deterministic display name computation with proper priority\n  const displayName = useMemo(() => {\n    if (user?.farcasterUsername) return `@${user.farcasterUsername}`;\n    if (user?.farcasterDisplayName) return user.farcasterDisplayName;\n    if (ensName) return ensName;\n    if (address) return `${address.slice(0, 6)}...${address.slice(-4)}`;\n    return null;\n  }, [ensName, user?.farcasterUsername, user?.farcasterDisplayName, address]);\n\n  const connectFarcasterWallet = async () => {\n    try {\n      setConnecting(true);\n      const { sdk } = await import('@farcaster/miniapp-sdk');\n      const walletProvider = await sdk.wallet.getEthereumProvider();\n      if (walletProvider) {\n        const accounts = await walletProvider.request({\n          method: \"eth_requestAccounts\",\n        });\n        \n        if (accounts.length > 0) {\n          const walletAddress = accounts[0];\n          setAddress(walletAddress);\n          setIsConnected(true);\n          \n          await resolveENS(walletAddress);\n          await fetchBalances(walletAddress);\n          await handleUserCreation(walletAddress);\n          \n          return true;\n        }\n      }\n      return false;\n    } catch (error) {\n      console.log(\"Farcaster wallet connection failed:\", error);\n      return false;\n    } finally {\n      setConnecting(false);\n    }\n  };\n\n\n  const connect = async () => {\n    try {\n      setConnecting(true);\n      \n      // Connect only to Farcaster SDK wallet\n      const farcasterSuccess = await connectFarcasterWallet();\n      if (!farcasterSuccess) {\n        throw new Error(\"Failed to connect Farcaster wallet\");\n      }\n    } catch (error: any) {\n      console.error(\"Failed to connect wallet:\", error);\n      toast({\n        title: t('wallet.connectionFailed'),\n        description: t('wallet.connectionFailedDesc'),\n        variant: \"destructive\",\n      });\n    } finally {\n      setConnecting(false);\n    }\n  };\n\n  const disconnect = () => {\n    setIsConnected(false);\n    setAddress(null);\n    setEnsName(null);\n    setEnsAvatar(null);\n    setUsdcBalance(null);\n    setEthBalance(null);\n    setSolBalance(null);\n    setUser(null);\n    toast({\n      title: t('wallet.disconnected'),\n      description: t('wallet.disconnectedDesc'),\n    });\n  };\n\n  const updateUser = async (userData: Partial<User>) => {\n    if (!user) {\n      throw new Error(\"No user connected\");\n    }\n\n    try {\n      const response = await apiRequest(\"PATCH\", `/api/users/${user.id}`, userData);\n      const updatedUser = await response.json();\n      setUser(updatedUser);\n    } catch (error: any) {\n      throw new Error(`Failed to update user: ${error.message}`);\n    }\n  };\n\n  const resolveENS = async (walletAddress: string) => {\n    try {\n      // Using ENS API to resolve address to name and avatar\n      const response = await fetch(`https://api.ensideas.com/ens/resolve/${walletAddress}`);\n      const data = await response.json();\n      \n      if (data.name) {\n        setEnsName(data.name);\n        \n        // Try to get ENS avatar\n        if (data.avatar) {\n          setEnsAvatar(data.avatar);\n        } else {\n          // Try alternative ENS metadata API for avatar\n          try {\n            const metadataResponse = await fetch(`https://metadata.ens.domains/mainnet/avatar/${data.name}`);\n            if (metadataResponse.ok) {\n              const avatarUrl = metadataResponse.url;\n              setEnsAvatar(avatarUrl);\n            }\n          } catch (avatarError) {\n            console.log('No ENS avatar found');\n          }\n        }\n        \n        return data.name;\n      }\n    } catch (error) {\n      console.log(\"No ENS name found for wallet address\");\n    }\n    return null;\n  };\n\n  const fetchBalances = async (walletAddress: string) => {\n    try {\n      // USDC contract address on Base\n      const USDC_CONTRACT_ADDRESS = '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913';\n      \n      // Fetch USDC balance\n      const usdcResponse = await fetch('https://mainnet.base.org', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: 'eth_call',\n          params: [\n            {\n              to: USDC_CONTRACT_ADDRESS,\n              data: `0x70a08231000000000000000000000000${walletAddress.slice(2)}` // balanceOf function call\n            },\n            'latest'\n          ],\n          id: 1\n        })\n      });\n      \n      const usdcData = await usdcResponse.json();\n      if (usdcData.result) {\n        const balanceWei = BigInt(usdcData.result);\n        const balance = (Number(balanceWei) / 1000000).toFixed(2); // USDC has 6 decimals\n        setUsdcBalance(balance);\n      }\n      \n      // Fetch ETH balance\n      const ethResponse = await fetch('https://mainnet.base.org', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: 'eth_getBalance',\n          params: [walletAddress, 'latest'],\n          id: 2\n        })\n      });\n      \n      const ethData = await ethResponse.json();\n      if (ethData.result) {\n        const balanceWei = BigInt(ethData.result);\n        const balance = (Number(balanceWei) / 1e18).toFixed(4); // ETH has 18 decimals\n        setEthBalance(balance);\n      }\n\n      // SOL balance (simulated for demo - EVM wallets don't typically hold SOL)\n      setSolBalance('0.0000');\n    } catch (error) {\n      console.error('Error fetching balances:', error);\n      setUsdcBalance('0.00');\n      setEthBalance('0.0000');\n      setSolBalance('0.0000');\n    }\n  };\n\n  const handleUserCreation = async (walletAddress: string) => {\n    try {\n      const response = await apiRequest(\"GET\", `/api/users/${walletAddress}`);\n      const userData = await response.json();\n      setUser(userData);\n      \n      // If user exists but doesn't have Farcaster FID, try to fetch it\n      if (!userData.farcasterFid) {\n        await fetchAndUpdateFarcasterData(walletAddress, userData.id);\n      }\n    } catch (error: any) {\n      if (error.message.includes(\"404\")) {\n        // Fetch Farcaster data first\n        let farcasterData = null;\n        try {\n          const farcasterResponse = await apiRequest(\"GET\", `/api/farcaster/user-by-wallet/${walletAddress}`);\n          farcasterData = await farcasterResponse.json();\n        } catch (farcasterError) {\n          console.log(\"No Farcaster account found for this wallet\");\n        }\n\n        // Create new user with or without Farcaster data\n        const newUserData = {\n          walletAddress,\n          farcasterFid: farcasterData?.fid?.toString() || null,\n          farcasterUsername: farcasterData?.username || null,\n          farcasterDisplayName: farcasterData?.displayName || null,\n          farcasterAvatar: farcasterData?.pfpUrl || null,\n        };\n\n        const response = await apiRequest(\"POST\", \"/api/users\", newUserData);\n        const userData = await response.json();\n        setUser(userData);\n      } else {\n        throw error;\n      }\n    }\n  };\n\n  const fetchAndUpdateFarcasterData = async (walletAddress: string, userId: string) => {\n    try {\n      const farcasterResponse = await apiRequest(\"GET\", `/api/farcaster/user-by-wallet/${walletAddress}`);\n      const farcasterData = await farcasterResponse.json();\n      \n      if (farcasterData?.fid) {\n        // Update user with Farcaster data\n        const updates = {\n          farcasterFid: farcasterData.fid.toString(),\n          farcasterUsername: farcasterData.username || null,\n          farcasterDisplayName: farcasterData.displayName || null,\n          farcasterAvatar: farcasterData.pfpUrl || null,\n        };\n        \n        const response = await apiRequest(\"PATCH\", `/api/users/${userId}`, updates);\n        const updatedUser = await response.json();\n        setUser(updatedUser);\n        \n        toast({\n          title: t('wallet.farcasterLinked'),\n          description: t('wallet.farcasterLinkedDesc').replace('{username}', farcasterData.username),\n        });\n        console.log(\"Farcaster data automatically linked to account\");\n      }\n    } catch (error) {\n      console.log(\"No Farcaster account found for this wallet address\");\n    }\n  };\n\n  // Check for existing connection on mount\n  useEffect(() => {\n    const checkConnection = async () => {\n      // First try Farcaster SDK wallet for auto-connect\n      try {\n        const { sdk } = await import('@farcaster/miniapp-sdk');\n        const walletProvider = await sdk.wallet.getEthereumProvider();\n        if (walletProvider) {\n          const accounts = await walletProvider.request({\n            method: \"eth_accounts\",\n          });\n          \n          if (accounts.length > 0) {\n            const walletAddress = accounts[0];\n            setAddress(walletAddress);\n            setIsConnected(true);\n            \n            await resolveENS(walletAddress);\n            await fetchBalances(walletAddress);\n            await handleUserCreation(walletAddress);\n            return;\n          }\n        }\n      } catch (farcasterError) {\n        console.log(\"Farcaster wallet not available for auto-connect\");\n      }\n\n    };\n\n    checkConnection();\n  }, []);\n\n  const value = {\n    isConnected,\n    address,\n    ensName,\n    ensAvatar,\n    displayName,\n    usdcBalance,\n    ethBalance,\n    solBalance,\n    user,\n    connecting,\n    connect,\n    connectFarcasterWallet,\n    disconnect,\n    updateUser,\n  };\n\n  return (\n    <WalletContext.Provider value={value}>\n      {children}\n    </WalletContext.Provider>\n  );\n}\n\nexport function useWallet() {\n  const context = useContext(WalletContext);\n  if (context === undefined) {\n    throw new Error(\"useWallet must be used within a WalletProvider\");\n  }\n  return context;\n}\n\n// Extend window type for TypeScript\ndeclare global {\n  interface Window {\n    ethereum?: {\n      request: (args: { method: string; params?: any[] }) => Promise<any>;\n      on: (event: string, callback: (...args: any[]) => void) => void;\n      removeListener: (event: string, callback: (...args: any[]) => void) => void;\n    };\n  }\n}\n","size_bytes":11669},"client/src/lib/constants.ts":{"content":"export const CONTENT_TYPES = [\n  { value: \"educational\", label: \"Educational Thread\" },\n  { value: \"news\", label: \"News Commentary\" },\n  { value: \"personal\", label: \"Personal Insight\" },\n  { value: \"analysis\", label: \"Industry Analysis\" },\n  { value: \"creative\", label: \"Creative Story\" },\n] as const;\n\nexport const TONE_OPTIONS = [\n  { value: \"professional\", label: \"Professional\" },\n  { value: \"casual\", label: \"Casual\" },\n  { value: \"humorous\", label: \"Humorous\" },\n] as const;\n\nexport const WALLET_CONNECT_PROJECT_ID = import.meta.env.VITE_WALLET_CONNECT_PROJECT_ID || \"your_project_id\";\n","size_bytes":592},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\n// Get API base URL from environment variable or default to current origin\nconst getApiBaseUrl = () => {\n  return import.meta.env.VITE_API_URL || '';\n};\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const apiBaseUrl = getApiBaseUrl();\n  const fullUrl = apiBaseUrl ? `${apiBaseUrl}${url}` : url;\n  \n  const res = await fetch(fullUrl, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const apiBaseUrl = getApiBaseUrl();\n    const url = queryKey.join(\"/\") as string;\n    const fullUrl = apiBaseUrl ? `${apiBaseUrl}${url}` : url;\n    \n    const res = await fetch(fullUrl, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1774},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { CornerWalletWidget } from \"@/components/corner-wallet-widget\";\nimport { ContentGenerator } from \"@/components/content-generator\";\nimport { ImageSelector } from \"@/components/image-selector\";\nimport { ContentPreview } from \"@/components/content-preview\";\nimport { useWallet } from \"@/hooks/use-wallet\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { useLanguage } from \"@/components/language-provider\";\nimport { LanguageSwitcher } from \"@/components/language-switcher\";\nimport { HamburgerMenu } from \"@/components/hamburger-menu\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Zap, Sun, Moon, Clock, ExternalLink } from \"lucide-react\";\nimport { SiX } from \"react-icons/si\";\nimport { Users } from \"lucide-react\";\nimport type { ContentDraft } from \"@shared/schema\";\n\ninterface PexelsPhoto {\n  id: number;\n  src: {\n    medium: string;\n    large: string;\n  };\n  alt: string;\n  photographer: string;\n}\n\ninterface UploadedImage {\n  id: string;\n  src: {\n    medium: string;\n    large: string;\n  };\n  alt: string;\n  photographer: string;\n  isUploaded: true;\n  file: File;\n}\n\ntype ImageType = PexelsPhoto | UploadedImage;\n\nexport default function Home() {\n  const [generatedContent, setGeneratedContent] = useState(\"\");\n  const [contentSource, setContentSource] = useState<'ai' | 'manual' | null>(null);\n  const [selectedImage, setSelectedImage] = useState<ImageType | null>(null);\n\n  // Reset all form fields after successful cast\n  const resetAllFields = () => {\n    setGeneratedContent(\"\");\n    setContentSource(null);\n    setSelectedImage(null);\n  };\n  const { user } = useWallet();\n  const { theme, setTheme } = useTheme();\n  const { t } = useLanguage();\n\n  // Fetch user's recent drafts\n  const { data: recentDrafts } = useQuery({\n    queryKey: [\"/api/drafts/user\", user?.id],\n    queryFn: async () => {\n      if (!user) return [];\n      const response = await fetch(`/api/drafts/user/${user.id}`);\n      if (!response.ok) throw new Error(\"Failed to fetch drafts\");\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  const toggleTheme = () => {\n    setTheme(theme === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Corner Wallet Widget + Hamburger Menu - Desktop only */}\n      <div className=\"hidden md:block\">\n        <CornerWalletWidget />\n        {/* Hamburger Menu positioned to the right of wallet widget */}\n        <div className=\"fixed top-4 right-4 z-50\">\n          <HamburgerMenu />\n        </div>\n      </div>\n      \n      {/* Header */}\n      <header className=\"border-b border-border bg-card/50 backdrop-blur-lg sticky top-0 z-40\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <img \n                src=\"/logo.png\" \n                alt=\"FarcastAI Logo\" \n                className=\"w-10 h-10 rounded-lg shadow-md\"\n              />\n              <div>\n                <h1 className=\"text-xl font-bold text-foreground\">{t('app.title')}</h1>\n                <p className=\"text-xs text-muted-foreground\">{t('app.subtitle')}</p>\n              </div>\n            </div>\n\n            {/* Desktop: Empty space - controls moved to hamburger menu */}\n            <div className=\"hidden md:block\">\n              {/* Desktop controls moved to hamburger menu positioned next to wallet */}\n            </div>\n\n            {/* Mobile: Hamburger menu + Wallet */}\n            <div className=\"flex md:hidden items-center space-x-2\">\n              <HamburgerMenu />\n              <div className=\"scale-90\">\n                <CornerWalletWidget />\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-8 max-w-4xl\">\n\n        {/* Content Creation */}\n        <div className=\"space-y-8\">\n          {/* Top Row - Creation Tools */}\n          <div className=\"grid lg:grid-cols-2 gap-8 items-stretch\">\n            <div className=\"h-full\">\n              <ContentGenerator onContentGenerated={(content, source) => {\n                setGeneratedContent(content);\n                setContentSource(source);\n              }} />\n            </div>\n            <div className=\"h-full\">\n              <ImageSelector \n                selectedImage={selectedImage} \n                onImageSelect={setSelectedImage} \n              />\n            </div>\n          </div>\n\n          {/* Bottom Row - Preview */}\n          <div className=\"w-full\">\n            <ContentPreview\n              content={generatedContent}\n              selectedImage={selectedImage}\n              contentSource={contentSource}\n              onContentChange={setGeneratedContent}\n              onResetFields={resetAllFields}\n            />\n          </div>\n        </div>\n\n        {/* Recent Activity */}\n        {recentDrafts && recentDrafts.length > 0 && (\n          <div className=\"mt-12\">\n            <h2 className=\"text-xl font-semibold text-foreground mb-6 flex items-center\">\n              <Clock className=\"w-6 h-6 mr-2 text-accent\" />\n              Recent Activity\n            </h2>\n\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {(recentDrafts as ContentDraft[]).slice(0, 6).map((draft: ContentDraft) => (\n                <Card\n                  key={draft.id}\n                  className=\"content-card border border-border hover:shadow-lg transition-all duration-200 cursor-pointer group\"\n                  data-testid={`draft-card-${draft.id}`}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        {new Date(draft.createdAt || new Date()).toLocaleDateString()}\n                      </span>\n                      {draft.isPublished && (\n                        <div className=\"flex items-center space-x-1 text-accent\">\n                          <ExternalLink className=\"w-3 h-3\" />\n                          <span className=\"text-xs\">Published</span>\n                        </div>\n                      )}\n                    </div>\n\n                    {draft.selectedImage && typeof draft.selectedImage === 'object' && 'url' in draft.selectedImage && (\n                      <img\n                        src={(draft.selectedImage as any).url}\n                        alt={(draft.selectedImage as any).alt || ''}\n                        className=\"w-full max-h-32 object-contain rounded-lg mb-3\"\n                      />\n                    )}\n\n                    <div className=\"space-y-2\">\n                      <h3 className=\"font-medium text-foreground line-clamp-1\">\n                        {draft.topic}\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                        {draft.generatedContent?.slice(0, 100) || \"Draft saved\"}\n                        {draft.generatedContent && draft.generatedContent.length > 100 && \"...\"}\n                      </p>\n                    </div>\n\n                    <div className=\"flex items-center justify-between mt-4 pt-3 border-t border-border\">\n                      <span className=\"text-xs text-muted-foreground capitalize\">\n                        {draft.contentType} â€¢ {draft.tone}\n                      </span>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        className=\"opacity-0 group-hover:opacity-100 transition-opacity\"\n                        data-testid={`button-view-draft-${draft.id}`}\n                      >\n                        View â†’\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n      </main>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border bg-card/50 backdrop-blur-lg mt-16\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex flex-col md:flex-row items-center justify-between\">\n            <div className=\"flex items-center space-x-2 mb-4 md:mb-0\">\n              <div className=\"w-6 h-6 wallet-gradient rounded\"></div>\n              <span className=\"text-sm text-muted-foreground\">\n                Â© {new Date().getFullYear()} By MrRobotCrypto\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-6\">\n              <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors text-sm\">\n                Privacy\n              </a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors text-sm\">\n                Terms\n              </a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors text-sm\">\n                Support\n              </a>\n              <a \n                href=\"https://x.com/MrRobotKripto\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\" \n                className=\"text-muted-foreground hover:text-foreground transition-colors ml-2\" \n                data-testid=\"link-twitter\"\n                aria-label=\"Follow on X (Twitter)\"\n              >\n                <SiX size={16} />\n              </a>\n              <a \n                href=\"https://farcaster.xyz/mrrobotcrypto.eth\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\" \n                className=\"text-muted-foreground hover:text-foreground transition-colors ml-2\" \n                data-testid=\"link-farcaster\"\n                aria-label=\"Follow on Farcaster\"\n              >\n                <Users size={16} />\n              </a>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":10085},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider duration={2000}>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":788},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/language-switcher.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Languages, Check } from \"lucide-react\";\nimport { useLanguage } from \"@/components/language-provider\";\n\nexport function LanguageSwitcher() {\n  const { language, setLanguage, t } = useLanguage();\n\n  const handleLanguageChange = (newLang: 'en' | 'tr') => {\n    setLanguage(newLang);\n    \n    // Clear form data when language changes\n    // Dispatch a custom event to notify components to clear their state\n    window.dispatchEvent(new CustomEvent('languageChanged', {\n      detail: { newLanguage: newLang }\n    }));\n  };\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"gap-2\"\n          data-testid=\"button-language-switcher\"\n        >\n          <Languages className=\"h-4 w-4\" />\n          <span className=\"hidden sm:inline\">\n            {language === 'tr' ? 'TR' : 'EN'}\n          </span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem \n          onClick={() => handleLanguageChange('en')}\n          className=\"flex items-center gap-2\"\n          data-testid=\"language-option-en\"\n        >\n          {language === 'en' && <Check className=\"h-4 w-4\" />}\n          <span className={language === 'en' ? 'ml-0' : 'ml-6'}>\n            ðŸ‡ºðŸ‡¸ English\n          </span>\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => handleLanguageChange('tr')}\n          className=\"flex items-center gap-2\"\n          data-testid=\"language-option-tr\"\n        >\n          {language === 'tr' && <Check className=\"h-4 w-4\" />}\n          <span className={language === 'tr' ? 'ml-0' : 'ml-6'}>\n            ðŸ‡¹ðŸ‡· TÃ¼rkÃ§e\n          </span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1986},"client/src/contexts/language-context.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ntype Language = 'en' | 'tr';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport const useLanguage = () => {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};\n\n// Translation dictionary\nconst translations = {\n  en: {\n    // Header\n    'app.title': 'FarcastAI',\n    'app.subtitle': 'AI Content Creator',\n    \n    // Content Generator\n    'content.creator': 'Content Creator',\n    'content.aiGeneration': 'AI Generation',\n    'content.manualInput': 'Manual Input',\n    'content.topic': 'Content Topic',\n    'content.topic.placeholder': 'What would you like to create content about?',\n    'content.type': 'Content Type',\n    'content.type.educational': 'Educational Thread',\n    'content.type.news': 'News Update',\n    'content.type.personal': 'Personal Story',\n    'content.type.analysis': 'Industry Analysis',\n    'content.type.creative': 'Creative Story',\n    'content.tone': 'Tone',\n    'content.tone.professional': 'Professional',\n    'content.tone.casual': 'Casual',\n    'content.tone.humorous': 'Humorous',\n    'content.generate': 'Generate Content',\n    'content.generating': 'Generating...',\n    \n    // Image Selector\n    'images.title': 'Image Selection',\n    'images.featured': 'Featured Images',\n    'images.search': 'Search Images',\n    'images.search.placeholder': 'Search for images...',\n    'images.uploading': 'Uploading...',\n    'images.upload': 'Upload Image',\n    'images.select': 'Select Image',\n    'images.selected': 'Selected',\n    'images.photographer': 'Photo by',\n    \n    // Content Preview\n    'preview.title': 'Content Preview',\n    'preview.edit': 'Edit',\n    'preview.cancel': 'Cancel',\n    'preview.saveChanges': 'Save Changes',\n    'preview.yourUsername': 'Your Username',\n    'preview.generatedBy': 'Generated by FarcastAI',\n    'preview.reply': 'Reply',\n    'preview.recast': 'Recast',\n    'preview.like': 'Like',\n    'preview.castToFarcaster': 'Cast to Farcaster',\n    'preview.publishing': 'Publishing...',\n    'preview.connectWallet': 'Connect your wallet to publish content',\n    \n    // Cast Preparation\n    'cast.prepared': 'Cast prepared! Share manually on Farcaster',\n    'cast.content': 'Prepared content:',\n    'cast.openFarcaster': 'Open in Farcaster and Share',\n    'cast.close': 'Close',\n    \n    // Wallet\n    'wallet.connect': 'Connect Wallet',\n    'wallet.connecting': 'Connecting...',\n    'wallet.connected': 'Wallet Connected',\n    'wallet.farcaster': 'Connect with Farcaster Wallet',\n    'wallet.coinbase': 'Connect with Coinbase Wallet',\n    'wallet.disconnect': 'Disconnect',\n    'wallet.fid': 'FID:',\n    'wallet.notConnected': 'Not connected',\n    'wallet.address': 'Address:',\n    'wallet.ensName': 'ENS Name:',\n    \n    // Recent Activity\n    'activity.title': 'Recent Activity',\n    'activity.published': 'Published',\n    'activity.draftSaved': 'Draft saved',\n    'activity.view': 'View â†’',\n    \n    // Footer\n    'footer.privacy': 'Privacy',\n    'footer.terms': 'Terms',\n    'footer.support': 'Support',\n    \n    // Toasts & Messages\n    'toast.contentGenerated': 'Content generated successfully!',\n    'toast.castPrepared': 'Cast prepared!',\n    'toast.castPreparedDesc': 'You can share manually on Farcaster',\n    'toast.walletConnected': 'Wallet Connected',\n    'toast.walletDisconnected': 'Wallet Disconnected',\n    'toast.connectionFailed': 'Connection Failed',\n    'toast.farcasterLinked': 'Farcaster account linked!',\n    'toast.farcasterLinkedDesc': 'account automatically linked',\n    \n    // Demo Mode\n    'demo.indicator': 'Demo Mode: Casts are simulated - Not sent to real Farcaster',\n    \n    // Language\n    'language.switch': 'Switch Language',\n    'language.turkish': 'TÃ¼rkÃ§e',\n    'language.english': 'English'\n  },\n  tr: {\n    // Header\n    'app.title': 'FarcastAI',\n    'app.subtitle': 'AI Ä°Ã§erik Ãœretici',\n    \n    // Content Generator\n    'content.creator': 'Ä°Ã§erik Ãœretici',\n    'content.aiGeneration': 'AI Ãœretimi',\n    'content.manualInput': 'Manuel GiriÅŸ',\n    'content.topic': 'Ä°Ã§erik Konusu',\n    'content.topic.placeholder': 'Hangi konu hakkÄ±nda iÃ§erik oluÅŸturmak istiyorsunuz?',\n    'content.type': 'Ä°Ã§erik TÃ¼rÃ¼',\n    'content.type.educational': 'EÄŸitici Thread',\n    'content.type.news': 'Haber GÃ¼ncellemesi',\n    'content.type.personal': 'KiÅŸisel Hikaye',\n    'content.type.analysis': 'SektÃ¶r Analizi',\n    'content.type.creative': 'YaratÄ±cÄ± Hikaye',\n    'content.tone': 'Ton',\n    'content.tone.professional': 'Profesyonel',\n    'content.tone.casual': 'Samimi',\n    'content.tone.humorous': 'Esprili',\n    'content.generate': 'Ä°Ã§erik Ãœret',\n    'content.generating': 'Ãœretiliyor...',\n    \n    // Image Selector\n    'images.title': 'GÃ¶rsel SeÃ§imi',\n    'images.featured': 'Ã–ne Ã‡Ä±kan GÃ¶rseller',\n    'images.search': 'GÃ¶rsel Ara',\n    'images.search.placeholder': 'GÃ¶rsel arayÄ±n...',\n    'images.uploading': 'YÃ¼kleniyor...',\n    'images.upload': 'GÃ¶rsel YÃ¼kle',\n    'images.select': 'GÃ¶rseli SeÃ§',\n    'images.selected': 'SeÃ§ildi',\n    'images.photographer': 'FotoÄŸrafÃ§Ä±:',\n    \n    // Content Preview\n    'preview.title': 'Ä°Ã§erik Ã–nizleme',\n    'preview.edit': 'DÃ¼zenle',\n    'preview.cancel': 'Ä°ptal',\n    'preview.saveChanges': 'DeÄŸiÅŸiklikleri Kaydet',\n    'preview.yourUsername': 'KullanÄ±cÄ± AdÄ±nÄ±z',\n    'preview.generatedBy': 'FarcastAI tarafÄ±ndan Ã¼retildi',\n    'preview.reply': 'YanÄ±tla',\n    'preview.recast': 'Recast',\n    'preview.like': 'BeÄŸen',\n    'preview.castToFarcaster': 'Farcaster\\'a GÃ¶nder',\n    'preview.publishing': 'GÃ¶nderiliyor...',\n    'preview.connectWallet': 'Ä°Ã§erik yayÄ±nlamak iÃ§in cÃ¼zdanÄ±nÄ±zÄ± baÄŸlayÄ±n',\n    \n    // Cast Preparation\n    'cast.prepared': 'Cast hazÄ±rlandÄ±! Manuel olarak Farcaster\\'da paylaÅŸÄ±n',\n    'cast.content': 'HazÄ±rlanan iÃ§erik:',\n    'cast.openFarcaster': 'Farcaster\\'da AÃ§ ve PaylaÅŸ',\n    'cast.close': 'Kapat',\n    \n    // Wallet\n    'wallet.connect': 'CÃ¼zdan BaÄŸla',\n    'wallet.connecting': 'BaÄŸlanÄ±yor...',\n    'wallet.connected': 'CÃ¼zdan BaÄŸlandÄ±',\n    'wallet.farcaster': 'Farcaster CÃ¼zdanÄ± ile BaÄŸlan',\n    'wallet.coinbase': 'Coinbase CÃ¼zdanÄ± ile BaÄŸlan',\n    'wallet.disconnect': 'BaÄŸlantÄ±yÄ± Kes',\n    'wallet.fid': 'FID:',\n    'wallet.notConnected': 'BaÄŸlÄ± deÄŸil',\n    'wallet.address': 'Adres:',\n    'wallet.ensName': 'ENS AdÄ±:',\n    \n    // Recent Activity\n    'activity.title': 'Son Aktiviteler',\n    'activity.published': 'YayÄ±nlandÄ±',\n    'activity.draftSaved': 'Taslak kaydedildi',\n    'activity.view': 'GÃ¶rÃ¼ntÃ¼le â†’',\n    \n    // Footer\n    'footer.privacy': 'Gizlilik',\n    'footer.terms': 'Åžartlar',\n    'footer.support': 'Destek',\n    \n    // Toasts & Messages\n    'toast.contentGenerated': 'Ä°Ã§erik baÅŸarÄ±yla Ã¼retildi!',\n    'toast.castPrepared': 'Cast hazÄ±rlandÄ±!',\n    'toast.castPreparedDesc': 'Farcaster\\'da manuel olarak paylaÅŸabilirsiniz',\n    'toast.walletConnected': 'CÃ¼zdan BaÄŸlandÄ±',\n    'toast.walletDisconnected': 'CÃ¼zdan BaÄŸlantÄ±sÄ± Kesildi',\n    'toast.connectionFailed': 'BaÄŸlantÄ± BaÅŸarÄ±sÄ±z',\n    'toast.farcasterLinked': 'Farcaster hesabÄ± baÄŸlandÄ±!',\n    'toast.farcasterLinkedDesc': 'hesabÄ±nÄ±z otomatik olarak baÄŸlandÄ±',\n    \n    // Demo Mode\n    'demo.indicator': 'Demo Modu: Cast\\'ler simÃ¼le ediliyor - GerÃ§ek Farcaster\\'a gÃ¶nderilmiyor',\n    \n    // Language\n    'language.switch': 'Dil DeÄŸiÅŸtir',\n    'language.turkish': 'TÃ¼rkÃ§e',\n    'language.english': 'English'\n  }\n};\n\ninterface LanguageProviderProps {\n  children: ReactNode;\n}\n\nexport const LanguageProvider = ({ children }: LanguageProviderProps) => {\n  const [language, setLanguage] = useState<Language>(() => {\n    const stored = localStorage.getItem('farcastai-language');\n    return (stored as Language) || 'en';\n  });\n\n  useEffect(() => {\n    localStorage.setItem('farcastai-language', language);\n  }, [language]);\n\n  const t = (key: string): string => {\n    return translations[language][key as keyof typeof translations[typeof language]] || key;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};","size_bytes":8445},"client/src/components/content-suggestions.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useLanguage } from \"@/components/language-provider\";\nimport { \n  Quote,\n  Coins,\n  Users,\n  TrendingUp,\n  Newspaper,\n  Zap,\n  Image,\n  Gamepad2\n} from \"lucide-react\";\n\ninterface ContentSuggestionsProps {\n  onSuggestionClick: (topic: string) => void;\n}\n\nexport function ContentSuggestions({ onSuggestionClick }: ContentSuggestionsProps) {\n  const { t, language } = useLanguage();\n\n  const suggestions = [\n    {\n      key: 'dailyQuote',\n      icon: Quote,\n      color: 'bg-purple-100 dark:bg-purple-900/20 text-purple-600 dark:text-purple-400',\n      topics: {\n        en: \"Share an inspiring daily quote about innovation, perseverance, or success\",\n        tr: \"Ä°novasyon, azim veya baÅŸarÄ± hakkÄ±nda ilham verici bir gÃ¼nlÃ¼k sÃ¶z paylaÅŸ\"\n      }\n    },\n    {\n      key: 'baseToken',\n      icon: Coins,\n      color: 'bg-blue-100 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400',\n      topics: {\n        en: \"Discuss the latest developments and innovations in Base blockchain ecosystem\",\n        tr: \"Base blockchain ekosistemindeki son geliÅŸmeler ve yenilikler hakkÄ±nda konuÅŸ\"\n      }\n    },\n    {\n      key: 'farcasterInfo',\n      icon: Users,\n      color: 'bg-green-100 dark:bg-green-900/20 text-green-600 dark:text-green-400',\n      topics: {\n        en: \"Explain what Farcaster is and why it's the future of decentralized social networks\",\n        tr: \"Farcaster'Ä±n ne olduÄŸunu ve neden merkezi olmayan sosyal aÄŸlarÄ±n geleceÄŸi olduÄŸunu aÃ§Ä±kla\"\n      }\n    },\n    {\n      key: 'defiTrends',\n      icon: TrendingUp,\n      color: 'bg-orange-100 dark:bg-orange-900/20 text-orange-600 dark:text-orange-400',\n      topics: {\n        en: \"Analyze current DeFi trends and their impact on traditional finance\",\n        tr: \"Mevcut DeFi trendlerini ve bunlarÄ±n geleneksel finans Ã¼zerindeki etkisini analiz et\"\n      }\n    },\n    {\n      key: 'cryptoNews',\n      icon: Newspaper,\n      color: 'bg-red-100 dark:bg-red-900/20 text-red-600 dark:text-red-400',\n      topics: {\n        en: \"Share breaking news and insights from the cryptocurrency world\",\n        tr: \"Kripto para dÃ¼nyasÄ±ndan son dakika haberleri ve iÃ§gÃ¶rÃ¼leri paylaÅŸ\"\n      }\n    },\n    {\n      key: 'aiTech',\n      icon: Zap,\n      color: 'bg-yellow-100 dark:bg-yellow-900/20 text-yellow-600 dark:text-yellow-400',\n      topics: {\n        en: \"Discuss the latest AI technology breakthroughs and their real-world applications\",\n        tr: \"En son AI teknoloji atÄ±lÄ±mlarÄ±nÄ± ve gerÃ§ek dÃ¼nya uygulamalarÄ±nÄ± tartÄ±ÅŸ\"\n      }\n    },\n    {\n      key: 'nftTrends',\n      icon: Image,\n      color: 'bg-indigo-100 dark:bg-indigo-900/20 text-indigo-600 dark:text-indigo-400',\n      topics: {\n        en: \"Discuss latest NFT marketplace trends, digital art collections, and creator opportunities\",\n        tr: \"Son NFT pazar trendleri, dijital sanat koleksiyonlarÄ± ve yaratÄ±cÄ± fÄ±rsatlarÄ± tartÄ±ÅŸ\"\n      }\n    },\n    {\n      key: 'web3Gaming',\n      icon: Gamepad2,\n      color: 'bg-teal-100 dark:bg-teal-900/20 text-teal-600 dark:text-teal-400',\n      topics: {\n        en: \"Explore play-to-earn gaming, blockchain gaming innovations, and gaming token economics\",\n        tr: \"Play-to-earn oyunlarÄ±, blockchain oyun yeniliklerini ve oyun token ekonomilerini keÅŸfet\"\n      }\n    },\n  ];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg flex items-center\">\n          <Zap className=\"w-5 h-5 mr-2 text-primary\" />\n          {t('content.suggestions.title')}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-2 gap-2\">\n          {suggestions.map((suggestion) => (\n            <Button\n              key={suggestion.key}\n              variant=\"outline\"\n              onClick={() => onSuggestionClick(suggestion.topics[language as keyof typeof suggestion.topics])}\n              className=\"h-auto p-2 flex items-center justify-start space-x-2 hover:bg-accent/50 border-2 hover:border-primary/20 transition-all duration-200 whitespace-normal text-left\"\n              data-testid={`suggestion-${suggestion.key}`}\n            >\n              <div className={`w-6 h-6 rounded-lg flex items-center justify-center flex-shrink-0 ${suggestion.color}`}>\n                <suggestion.icon className=\"w-3 h-3\" />\n              </div>\n              <span className=\"text-[10px] font-medium leading-tight text-left flex-1 break-words\">\n                {t(`content.suggestions.${suggestion.key}`)}\n              </span>\n            </Button>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4697},"client/src/components/hamburger-menu.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { useLanguage } from \"@/components/language-provider\";\nimport { \n  Sheet, \n  SheetContent, \n  SheetTrigger \n} from \"@/components/ui/sheet\";\nimport { \n  Menu,\n  Palette,\n  ShoppingBag,\n  Info,\n  Globe,\n  Sun,\n  Moon,\n  Check\n} from \"lucide-react\";\n\nexport function HamburgerMenu() {\n  const [isOpen, setIsOpen] = useState(false);\n  const { theme, setTheme } = useTheme();\n  const { language, setLanguage, t } = useLanguage();\n\n  const handleThemeChange = (newTheme: \"light\" | \"dark\") => {\n    setTheme(newTheme);\n  };\n\n  const handleLanguageChange = (newLanguage: string) => {\n    setLanguage(newLanguage);\n  };\n\n  const menuItems = [\n    {\n      icon: Palette,\n      label: t('header.theme'),\n      type: 'theme' as const,\n    },\n    {\n      icon: ShoppingBag,\n      label: t('header.shop'),\n      type: 'shop' as const,\n    },\n    {\n      icon: Info,\n      label: t('header.about'),\n      type: 'about' as const,\n    },\n    {\n      icon: Globe,\n      label: t('header.language'),\n      type: 'language' as const,\n    },\n  ];\n\n  return (\n    <Sheet open={isOpen} onOpenChange={setIsOpen}>\n      <SheetTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"p-2 hover:bg-accent/50\"\n          data-testid=\"button-hamburger-menu\"\n        >\n          <Menu className=\"w-5 h-5\" />\n        </Button>\n      </SheetTrigger>\n      \n      <SheetContent side=\"right\" className=\"w-80 p-0\">\n        <div className=\"flex flex-col h-full\">\n          <div className=\"p-6 border-b\">\n            <h2 className=\"text-lg font-semibold\">{t('settings')}</h2>\n          </div>\n          \n          <div className=\"flex-1 overflow-y-auto\">\n            <div className=\"py-4\">\n              {menuItems.map((item, index) => (\n                <div key={index} className=\"px-6 py-3\">\n                  <div className=\"flex items-center space-x-3 mb-2\">\n                    <div className=\"w-8 h-8 bg-accent/20 rounded-lg flex items-center justify-center\">\n                      <item.icon className=\"w-4 h-4 text-accent\" />\n                    </div>\n                    <span className=\"font-medium\">{item.label}</span>\n                  </div>\n                  \n                  {item.type === 'theme' && (\n                    <div className=\"ml-11 space-y-2\">\n                      <Button\n                        variant={theme === 'light' ? 'default' : 'ghost'}\n                        size=\"sm\"\n                        onClick={() => handleThemeChange('light')}\n                        className=\"w-full justify-start\"\n                      >\n                        <Sun className=\"w-4 h-4 mr-2\" />\n                        {t('theme.light')}\n                        {theme === 'light' && <Check className=\"w-4 h-4 ml-auto\" />}\n                      </Button>\n                      <Button\n                        variant={theme === 'dark' ? 'default' : 'ghost'}\n                        size=\"sm\"\n                        onClick={() => handleThemeChange('dark')}\n                        className=\"w-full justify-start\"\n                      >\n                        <Moon className=\"w-4 h-4 mr-2\" />\n                        {t('theme.dark')}\n                        {theme === 'dark' && <Check className=\"w-4 h-4 ml-auto\" />}\n                      </Button>\n                    </div>\n                  )}\n                  \n                  {item.type === 'language' && (\n                    <div className=\"ml-11 space-y-2\">\n                      <Button\n                        variant={language === 'en' ? 'default' : 'ghost'}\n                        size=\"sm\"\n                        onClick={() => handleLanguageChange('en')}\n                        className=\"w-full justify-start\"\n                      >\n                        ðŸ‡ºðŸ‡¸ English\n                        {language === 'en' && <Check className=\"w-4 h-4 ml-auto\" />}\n                      </Button>\n                      <Button\n                        variant={language === 'tr' ? 'default' : 'ghost'}\n                        size=\"sm\"\n                        onClick={() => handleLanguageChange('tr')}\n                        className=\"w-full justify-start\"\n                      >\n                        ðŸ‡¹ðŸ‡· TÃ¼rkÃ§e\n                        {language === 'tr' && <Check className=\"w-4 h-4 ml-auto\" />}\n                      </Button>\n                    </div>\n                  )}\n                  \n                  {item.type === 'shop' && (\n                    <div className=\"ml-11\">\n                      <p className=\"text-sm text-muted-foreground\">{t('comingSoon')}</p>\n                    </div>\n                  )}\n                  \n                  {item.type === 'about' && (\n                    <div className=\"ml-11\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        {t('aboutDescription')}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}","size_bytes":5214},"client/src/components/language-provider.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\n\ninterface LanguageContextType {\n  language: string;\n  setLanguage: (lang: string) => void;\n  t: (key: string) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nconst translations = {\n  en: {\n    'app.title': 'FarcastAI',\n    'app.subtitle': 'AI Content Creator',\n    'header.theme': 'Theme',\n    'header.shop': 'Shop', \n    'header.about': 'About',\n    'header.language': 'Language',\n    'wallet.connect': 'Connect Wallet',\n    'wallet.connecting': 'Connecting...',\n    'wallet.connected': 'Wallet Connected',\n    'wallet.disconnect': 'Disconnect',\n    'wallet.viewProfile': 'View Profile',\n    'wallet.copyAddress': 'Copy Address',\n    'wallet.ensName': 'ENS Name',\n    'wallet.address': 'Wallet Address',\n    'wallet.balance': 'Balance',\n    'wallet.connectWithFarcaster': 'Connect with Farcaster',\n    'wallet.connectWithCoinbase': 'Connect with Coinbase Wallet',\n    'wallet.farcasterDescription': 'Use your Farcaster identity',\n    'wallet.coinbaseDescription': 'Use Coinbase Wallet app',\n    'wallet.chooseWallet': 'Choose a wallet to connect and access the FarcastAI platform',\n    'wallet.farcasterConnected': 'Farcaster Wallet',\n    'wallet.farcasterConnectedDesc': 'Connected with Farcaster wallet',\n    'wallet.coinbaseConnected': 'Coinbase Wallet',\n    'wallet.coinbaseConnectedDesc': 'Connected with Coinbase wallet',\n    'wallet.connectionFailed': 'Connection Failed',\n    'wallet.connectionFailedDesc': 'Please make sure you have a Web3 wallet installed and try again',\n    'wallet.coinbaseFailedDesc': 'Please make sure you have Coinbase Wallet installed and try again',\n    'wallet.disconnected': 'Wallet Disconnected',\n    'wallet.disconnectedDesc': 'Your wallet has been disconnected',\n    'wallet.unknown': 'Unknown',\n    'wallet.connectYourWallet': 'Connect Your Wallet',\n    'wallet.chooseWalletToConnect': 'Choose a wallet to connect and access the FarcastAI platform',\n    'wallet.farcaster': 'Farcaster',\n    'wallet.connectWallet': 'Connect wallet',\n    'wallet.coinbaseWallet': 'Coinbase Wallet',\n    'wallet.connectUsingCoinbase': 'Connect using Coinbase Wallet',\n    'wallet.termsOfService': 'By connecting your wallet, you agree to our Terms of Service',\n    'wallet.aiContentRequiresWallet': 'AI Content Requires Wallet',\n    'wallet.connectWalletToCastAI': 'Please connect your wallet to cast AI-generated content',\n    'wallet.farcasterLinked': 'Farcaster Account Linked',\n    'wallet.farcasterLinkedDesc': '@{username} account has been automatically linked',\n    'wallet.displayName': 'Display Name',\n    'wallet.username': 'Username',\n    'wallet.farcasterID': 'Farcaster ID',\n    'content.generate': 'Generate Content',\n    'content.preparing': 'Preparing...',\n    'content.prepare': 'Prepare Cast',\n    'content.openFarcaster': 'Open in Farcaster',\n    'content.close': 'Close',\n    'content.readyToPost': 'Cast ready! Share manually on Farcaster',\n    'content.topic': 'Topic',\n    'content.topicPlaceholder': 'What would you like to create content about?',\n    'content.contentType': 'Content Type',\n    'content.tone': 'Tone',\n    'content.suggestions.title': 'Quick Suggestions',\n    'content.suggestions.dailyQuote': 'Daily Quote',\n    'content.suggestions.baseToken': 'Base Token',\n    'content.suggestions.farcasterInfo': 'What is Farcaster?',\n    'content.suggestions.cryptoNews': 'Crypto News',\n    'content.suggestions.defiTrends': 'DeFi Trends',\n    'content.suggestions.aiTech': 'AI Technology',\n    'content.suggestions.nftTrends': 'NFT Trends',\n    'content.suggestions.web3Gaming': 'Web3 Gaming',\n    'content.generator': 'Content Generator',\n    'content.aiGeneration': 'AI Generation',\n    'content.manualInput': 'Manual Input',\n    'content.yourContent': 'Your Content',\n    'content.manualInput.placeholder': 'Write your content here...\\n\\nYou can create:\\nâ€¢ Thread posts with numbered points (1/, 2/, 3/)\\nâ€¢ News updates and analysis\\nâ€¢ Personal stories and experiences\\nâ€¢ Educational content\\nâ€¢ Creative writing\\n\\nTip: Use emojis and line breaks for better readability!',\n    'content.topic.placeholder': 'What would you like to create content about?',\n    'content.type': 'Content Type',\n    'content.edit': 'Edit',\n    'content.save': 'Save',\n    'content.cancel': 'Cancel',\n    'content.characters': 'characters',\n    'content.readyToUse': 'Ready to use',\n    'content.useThisContent': 'Use This Content',\n    'content.preview': 'Content Preview',\n    'content.saveChanges': 'Save Changes',\n    'content.prepareCast': 'Prepare Cast',\n    'content.castPrepared': 'Cast prepared!',\n    'content.shareManually': 'Share manually on Farcaster',\n    'content.castOpened': 'Cast opened!',\n    'content.nativeFarcasterOpened': 'Native Farcaster compose opened',\n    'content.preparedContent': 'Prepared content:',\n    'content.noContentToPrepare': 'No content to prepare',\n    'content.generateContentFirst': 'Please generate content before preparing cast',\n    'content.publishingFailed': 'Publishing failed',\n    'content.failedToPublish': 'Failed to publish content to Farcaster',\n    'content.contentUpdated': 'Content updated',\n    'content.changesSaved': 'Your changes have been saved',\n    'content.reply': 'Reply',\n    'content.recast': 'Recast',\n    'content.like': 'Like',\n    'toast.contentGenerated': 'Content Generated',\n    'toast.contentReady': 'Your AI-powered content is ready for review',\n    'toast.tryAgainLater': 'Please try again later.',\n    'toast.quotaExceeded': 'AI API quota exceeded',\n    'toast.quotaExceededDesc': 'Please check your AI API billing or try the manual content creation mode.',\n    'toast.configIssue': 'AI API configuration issue',\n    'toast.configIssueDesc': 'Please check your API key configuration.',\n    'toast.tooManyRequests': 'Too many requests',\n    'toast.tooManyRequestsDesc': 'Please wait a moment and try again.',\n    'toast.failedToGenerate': 'Failed to generate content',\n    'toast.draftSaved': 'Draft saved',\n    'toast.draftSavedDesc': 'Your content has been saved as a draft',\n    'toast.saveFailed': 'Save failed',\n    'toast.saveFailedDesc': 'Failed to save draft',\n    'toast.topicRequired': 'Topic required',\n    'toast.topicRequiredDesc': 'Please enter a topic for content generation',\n    'toast.contentTypeRequired': 'Content type required',\n    'toast.contentTypeRequiredDesc': 'Please select a content type',\n    'toast.contentRequired': 'Content required',\n    'toast.contentRequiredDesc': 'Please enter some content',\n    'toast.contentTooShort': 'Content too short',\n    'toast.contentTooShortDesc': 'Content must be at least 10 characters',\n    'toast.manualContentReady': 'Content ready!',\n    'toast.manualContentReadyDesc': 'Your manual content is ready for review',\n    'button.saving': 'Saving...',\n    'button.saveAsDraft': 'Save as Draft',\n    'content.generatedContentPlaceholder': 'Generated content will appear here...',\n    'content.editPlaceholder': 'Edit your content here...',\n    'content.recent': 'Recent Activity',\n    'content.published': 'Published',\n    'content.view': 'View',\n    'image.producer': 'Image Producer',\n    'image.selected': 'Image Selected',\n    'image.uploadedSelected': 'Uploaded image selected',\n    'image.stockPhotoSelected': 'Stock photo selected',\n    'image.stockPhotos': 'Stock Photos',\n    'image.uploadImage': 'Upload Image',\n    'image.searchStockPhotos': 'Search Stock Photos',\n    'image.searchPlaceholder': 'Search for images...',\n    'image.clickToUpload': 'Click to upload images',\n    'image.noUploadedImages': 'No uploaded images yet',\n    'image.uploadYourImages': 'Upload Your Images',\n    'image.searchRequired': 'Search query required',\n    'image.enterSearchTerm': 'Please enter a search term',\n    'image.invalidFileType': 'Invalid file type',\n    'image.uploadImageFile': 'Please upload an image file (JPG, PNG, GIF, etc.)',\n    'image.fileTooLarge': 'File too large',\n    'image.uploadSmaller10MB': 'Please upload an image smaller than 10MB',\n    'image.imageUploaded': 'Image uploaded',\n    'footer.poweredBy': 'Powered by Gemini AI & Pexels',\n    'preview.yourUsername': 'Your Username',\n    'preview.now': 'now',\n    'theme.light': 'Light',\n    'theme.dark': 'Dark',\n    'settings': 'Settings',\n    'comingSoon': 'Coming soon...',\n    'aboutDescription': 'FarcastAI - AI-powered content creation for Farcaster'\n  },\n  tr: {\n    'app.title': 'FarcastAI',\n    'app.subtitle': 'AI Ä°Ã§erik Ãœreticisi',\n    'header.theme': 'Tema',\n    'header.shop': 'MaÄŸaza',\n    'header.about': 'HakkÄ±nda', \n    'header.language': 'Dil',\n    'wallet.connect': 'CÃ¼zdan BaÄŸla',\n    'wallet.connecting': 'BaÄŸlanÄ±yor...',\n    'wallet.connected': 'CÃ¼zdan BaÄŸlandÄ±',\n    'wallet.disconnect': 'BaÄŸlantÄ±yÄ± Kes',\n    'wallet.viewProfile': 'Profili GÃ¶rÃ¼ntÃ¼le',\n    'wallet.copyAddress': 'Adresi Kopyala',\n    'wallet.ensName': 'ENS AdÄ±',\n    'wallet.address': 'CÃ¼zdan Adresi',\n    'wallet.balance': 'Bakiye',\n    'wallet.connectWithFarcaster': 'Farcaster ile BaÄŸlan',\n    'wallet.connectWithCoinbase': 'Coinbase Wallet ile BaÄŸlan',\n    'wallet.farcasterDescription': 'Farcaster kimliÄŸinizi kullanÄ±n',\n    'wallet.coinbaseDescription': 'Coinbase Wallet uygulamasÄ±nÄ± kullanÄ±n',\n    'wallet.chooseWallet': 'FarcastAI platformuna eriÅŸmek iÃ§in bir cÃ¼zdan seÃ§in',\n    'wallet.farcasterConnected': 'Farcaster CÃ¼zdanÄ±',\n    'wallet.farcasterConnectedDesc': 'Farcaster cÃ¼zdanÄ± ile baÄŸlandÄ±',\n    'wallet.coinbaseConnected': 'Coinbase CÃ¼zdanÄ±',\n    'wallet.coinbaseConnectedDesc': 'Coinbase cÃ¼zdanÄ± ile baÄŸlandÄ±',\n    'wallet.connectionFailed': 'BaÄŸlantÄ± BaÅŸarÄ±sÄ±z',\n    'wallet.connectionFailedDesc': 'LÃ¼tfen Web3 cÃ¼zdanÄ±nÄ±zÄ±n yÃ¼klÃ¼ olduÄŸundan emin olun ve tekrar deneyin',\n    'wallet.coinbaseFailedDesc': 'LÃ¼tfen Coinbase Wallet uygulamasÄ±nÄ±n yÃ¼klÃ¼ olduÄŸundan emin olun ve tekrar deneyin',\n    'wallet.disconnected': 'CÃ¼zdan BaÄŸlantÄ±sÄ± Kesildi',\n    'wallet.disconnectedDesc': 'CÃ¼zdanÄ±nÄ±zÄ±n baÄŸlantÄ±sÄ± kesildi',\n    'wallet.unknown': 'Bilinmeyen',\n    'wallet.connectYourWallet': 'CÃ¼zdanÄ±nÄ±zÄ± BaÄŸlayÄ±n',\n    'wallet.chooseWalletToConnect': 'FarcastAI platformuna eriÅŸmek iÃ§in bir cÃ¼zdan seÃ§in',\n    'wallet.farcaster': 'Farcaster',\n    'wallet.connectWallet': 'CÃ¼zdan baÄŸla',\n    'wallet.coinbaseWallet': 'Coinbase Wallet',\n    'wallet.connectUsingCoinbase': 'Coinbase Wallet kullanarak baÄŸlan',\n    'wallet.termsOfService': 'CÃ¼zdanÄ±nÄ±zÄ± baÄŸlayarak Hizmet ÅžartlarÄ±mÄ±zÄ± kabul etmiÅŸ olursunuz',\n    'wallet.aiContentRequiresWallet': 'AI Ä°Ã§erik CÃ¼zdan Gerektiriyor',\n    'wallet.connectWalletToCastAI': 'AI ile Ã¼retilen iÃ§eriÄŸi paylaÅŸmak iÃ§in lÃ¼tfen cÃ¼zdanÄ±nÄ±zÄ± baÄŸlayÄ±n',\n    'wallet.farcasterLinked': 'Farcaster HesabÄ± BaÄŸlandÄ±',\n    'wallet.farcasterLinkedDesc': '@{username} hesabÄ±nÄ±z otomatik olarak baÄŸlandÄ±',\n    'wallet.displayName': 'GÃ¶rÃ¼nen Ad',\n    'wallet.username': 'KullanÄ±cÄ± AdÄ±',\n    'wallet.farcasterID': 'Farcaster ID',\n    'content.generate': 'Ä°Ã§erik Ãœret',\n    'content.preparing': 'HazÄ±rlanÄ±yor...',\n    'content.prepare': 'Cast HazÄ±rla', \n    'content.openFarcaster': 'Farcaster\\'da AÃ§',\n    'content.close': 'Kapat',\n    'content.readyToPost': 'Cast hazÄ±rlandÄ±! Farcaster\\'da manuel olarak paylaÅŸÄ±n',\n    'content.topic': 'Konu',\n    'content.topicPlaceholder': 'Hangi konuda iÃ§erik oluÅŸturmak istiyorsunuz?',\n    'content.contentType': 'Ä°Ã§erik TÃ¼rÃ¼',\n    'content.tone': 'Ton',\n    'content.suggestions.title': 'HÄ±zlÄ± Ã–neriler',\n    'content.suggestions.dailyQuote': 'GÃ¼nÃ¼n SÃ¶zÃ¼',\n    'content.suggestions.baseToken': 'Base Token',\n    'content.suggestions.farcasterInfo': 'Farcaster Nedir?',\n    'content.suggestions.cryptoNews': 'Kripto Haberleri',\n    'content.suggestions.defiTrends': 'DeFi Trendleri',\n    'content.suggestions.aiTech': 'AI Teknolojisi',\n    'content.suggestions.nftTrends': 'NFT Trendleri',\n    'content.suggestions.web3Gaming': 'Web3 OyunlarÄ±',\n    'content.generator': 'Ä°Ã§erik Ãœreticisi',\n    'content.aiGeneration': 'AI Ãœretimi',\n    'content.manualInput': 'Manuel GiriÅŸ',\n    'content.yourContent': 'Ä°Ã§eriÄŸiniz',\n    'content.manualInput.placeholder': 'Ä°Ã§eriÄŸinizi buraya yazÄ±n...\\n\\nÅžunlarÄ± oluÅŸturabilirsiniz:\\nâ€¢ NumaralÄ± konulu gÃ¶nderiler (1/, 2/, 3/)\\nâ€¢ Haber gÃ¼ncellemeleri ve analizler\\nâ€¢ KiÅŸisel hikayeler ve deneyimler\\nâ€¢ EÄŸitici iÃ§erik\\nâ€¢ YaratÄ±cÄ± yazÄ±lar\\n\\nÄ°pucu: Daha iyi okunabilirlik iÃ§in emoji ve satÄ±r arasÄ± kullanÄ±n!',\n    'content.topic.placeholder': 'Hangi konuda iÃ§erik oluÅŸturmak istiyorsunuz?',\n    'content.type': 'Ä°Ã§erik TÃ¼rÃ¼',\n    'content.edit': 'DÃ¼zenle',\n    'content.save': 'Kaydet',\n    'content.cancel': 'Ä°ptal',\n    'content.characters': 'karakter',\n    'content.readyToUse': 'KullanÄ±ma hazÄ±r',\n    'content.useThisContent': 'Bu Ä°Ã§eriÄŸi Kullan',\n    'content.preview': 'Ä°Ã§erik Ã–nizleme',\n    'content.saveChanges': 'DeÄŸiÅŸiklikleri Kaydet',\n    'content.prepareCast': 'Cast HazÄ±rla',\n    'content.castPrepared': 'Cast hazÄ±rlandÄ±!',\n    'content.shareManually': 'Manuel olarak Farcaster\\'da paylaÅŸÄ±n',\n    'content.castOpened': 'Cast aÃ§Ä±ldÄ±!',\n    'content.nativeFarcasterOpened': 'Native Farcaster compose aÃ§Ä±ldÄ±',\n    'content.preparedContent': 'HazÄ±rlanan iÃ§erik:',\n    'content.noContentToPrepare': 'HazÄ±rlanacak iÃ§erik yok',\n    'content.generateContentFirst': 'LÃ¼tfen cast hazÄ±rlamadan Ã¶nce iÃ§erik oluÅŸturun',\n    'content.publishingFailed': 'YayÄ±nlama baÅŸarÄ±sÄ±z',\n    'content.failedToPublish': 'Ä°Ã§eriÄŸi Farcaster\\'a yayÄ±nlama baÅŸarÄ±sÄ±z oldu',\n    'content.contentUpdated': 'Ä°Ã§erik gÃ¼ncellendi',\n    'content.changesSaved': 'DeÄŸiÅŸiklikleriniz kaydedildi',\n    'content.reply': 'YanÄ±tla',\n    'content.recast': 'Yeniden YayÄ±nla',\n    'content.like': 'BeÄŸen',\n    'toast.contentGenerated': 'Ä°Ã§erik OluÅŸturuldu',\n    'toast.contentReady': 'AI destekli iÃ§eriÄŸiniz inceleme iÃ§in hazÄ±r',\n    'toast.tryAgainLater': 'LÃ¼tfen daha sonra tekrar deneyin.',\n    'toast.quotaExceeded': 'AI API kotasÄ± aÅŸÄ±ldÄ±',\n    'toast.quotaExceededDesc': 'LÃ¼tfen AI API faturalanÄ±znÄ±zÄ± kontrol edin veya manuel iÃ§erik oluÅŸturma modunu deneyin.',\n    'toast.configIssue': 'AI API yapÄ±landÄ±rma sorunu',\n    'toast.configIssueDesc': 'LÃ¼tfen API anahtarÄ± yapÄ±landÄ±rmanÄ±zÄ± kontrol edin.',\n    'toast.tooManyRequests': 'Ã‡ok fazla istek',\n    'toast.tooManyRequestsDesc': 'LÃ¼tfen bir dakika bekleyin ve tekrar deneyin.',\n    'toast.failedToGenerate': 'Ä°Ã§erik oluÅŸturma baÅŸarÄ±sÄ±z',\n    'toast.draftSaved': 'Taslak kaydedildi',\n    'toast.draftSavedDesc': 'Ä°Ã§eriÄŸiniz taslak olarak kaydedildi',\n    'toast.saveFailed': 'Kaydetme baÅŸarÄ±sÄ±z',\n    'toast.saveFailedDesc': 'Taslak kaydedilemedi',\n    'toast.topicRequired': 'Konu gerekli',\n    'toast.topicRequiredDesc': 'LÃ¼tfen iÃ§erik oluÅŸturma iÃ§in bir konu girin',\n    'toast.contentTypeRequired': 'Ä°Ã§erik tÃ¼rÃ¼ gerekli',\n    'toast.contentTypeRequiredDesc': 'LÃ¼tfen bir iÃ§erik tÃ¼rÃ¼ seÃ§in',\n    'toast.contentRequired': 'Ä°Ã§erik gerekli',\n    'toast.contentRequiredDesc': 'LÃ¼tfen biraz iÃ§erik girin',\n    'toast.contentTooShort': 'Ä°Ã§erik Ã§ok kÄ±sa',\n    'toast.contentTooShortDesc': 'Ä°Ã§erik en az 10 karakter olmalÄ±dÄ±r',\n    'toast.manualContentReady': 'Ä°Ã§erik hazÄ±r!',\n    'toast.manualContentReadyDesc': 'Manuel iÃ§eriÄŸiniz inceleme iÃ§in hazÄ±r',\n    'button.saving': 'Kaydediliyor...',\n    'button.saveAsDraft': 'Taslak Olarak Kaydet',\n    'content.generatedContentPlaceholder': 'OluÅŸturulan iÃ§erik burada gÃ¶rÃ¼necek...',\n    'content.editPlaceholder': 'Ä°Ã§eriÄŸinizi buraya dÃ¼zenleyin...',\n    'content.recent': 'Son Aktiviteler',\n    'content.published': 'YayÄ±nlandÄ±',\n    'content.view': 'GÃ¶rÃ¼ntÃ¼le',\n    'image.producer': 'Resim Ãœreticisi',\n    'image.selected': 'Resim SeÃ§ildi',\n    'image.uploadedSelected': 'YÃ¼klenen resim seÃ§ildi',\n    'image.stockPhotoSelected': 'Stok fotoÄŸraf seÃ§ildi',\n    'image.stockPhotos': 'Stok FotoÄŸraflar',\n    'image.uploadImage': 'Resim YÃ¼kle',\n    'image.searchStockPhotos': 'Stok FotoÄŸraf Ara',\n    'image.searchPlaceholder': 'Resim ara...',\n    'image.clickToUpload': 'Resimleri yÃ¼klemek iÃ§in tÄ±klayÄ±n',\n    'image.noUploadedImages': 'HenÃ¼z yÃ¼klenmiÅŸ resim yok',\n    'image.uploadYourImages': 'Resimlerinizi YÃ¼kleyin',\n    'image.searchRequired': 'Arama sorgusu gerekli',\n    'image.enterSearchTerm': 'LÃ¼tfen bir arama terimi girin',\n    'image.invalidFileType': 'GeÃ§ersiz dosya tÃ¼rÃ¼',\n    'image.uploadImageFile': 'LÃ¼tfen bir resim dosyasÄ± yÃ¼kleyin (JPG, PNG, GIF, vb.)',\n    'image.fileTooLarge': 'Dosya Ã§ok bÃ¼yÃ¼k',\n    'image.uploadSmaller10MB': 'LÃ¼tfen 10MB\\'dan kÃ¼Ã§Ã¼k bir resim yÃ¼kleyin',\n    'image.imageUploaded': 'Resim yÃ¼klendi',\n    'footer.poweredBy': 'Gemini AI ve Pexels tarafÄ±ndan desteklenmektedir',\n    'preview.yourUsername': 'KullanÄ±cÄ± AdÄ±nÄ±z',\n    'preview.now': 'ÅŸimdi',\n    'theme.light': 'AÃ§Ä±k',\n    'theme.dark': 'Koyu',\n    'settings': 'Ayarlar',\n    'comingSoon': 'YakÄ±nda...',\n    'aboutDescription': 'FarcastAI - Farcaster iÃ§in AI destekli iÃ§erik oluÅŸturma'\n  }\n};\n\nexport function LanguageProvider({ children }: { children: ReactNode }) {\n  const [language, setLanguageState] = useState<string>(() => {\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem('farcastai-language') || 'en';\n    }\n    return 'en';\n  });\n\n  const setLanguage = (lang: string) => {\n    setLanguageState(lang);\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('farcastai-language', lang);\n    }\n  };\n\n  const t = (key: string): string => {\n    const translation = translations[language as keyof typeof translations];\n    return translation?.[key as keyof typeof translation] || key;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}","size_bytes":18184}},"version":1}